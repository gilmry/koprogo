i18n.ts - Internationalisation
================================

**Localisation** : ``frontend/src/lib/i18n.ts``

Configuration de l'internationalisation (i18n) avec support 4 langues : nÃ©erlandais, franÃ§ais, allemand, anglais.

Configuration
-------------

**BibliothÃ¨que** : ``svelte-i18n``

.. code-block:: typescript

   import { addMessages, init, getLocaleFromNavigator } from "svelte-i18n";

   import nl from "../locales/nl.json";
   import fr from "../locales/fr.json";
   import de from "../locales/de.json";
   import en from "../locales/en.json";

   // Enregistrer toutes les traductions
   addMessages("nl", nl);
   addMessages("fr", fr);
   addMessages("de", de);
   addMessages("en", en);

   // Initialiser avec dÃ©tection navigateur
   init({
     fallbackLocale: "nl",                 // NÃ©erlandais par dÃ©faut
     initialLocale: getLocaleFromNavigator()
   });

**Fallback Logic** :

1. DÃ©tecter langue navigateur (``getLocaleFromNavigator()``)
2. Si non supportÃ©e, fallback sur ``nl`` (nÃ©erlandais)

Langues SupportÃ©es
------------------

.. code-block:: typescript

   export const languages = [
     { code: "nl", name: "Nederlands", flag: "ðŸ‡³ðŸ‡±", priority: 1 },
     { code: "fr", name: "FranÃ§ais", flag: "ðŸ‡«ðŸ‡·", priority: 2 },
     { code: "de", name: "Deutsch", flag: "ðŸ‡©ðŸ‡ª", priority: 3 },
     { code: "en", name: "English", flag: "ðŸ‡¬ðŸ‡§", priority: 4 }
   ] as const;

   export type LanguageCode = (typeof languages)[number]["code"];

**PrioritÃ©s** :

1. **Nederlands (nl)** : 60% de la Belgique (Flandre)
2. **FranÃ§ais (fr)** : 40% de la Belgique (Wallonie + Bruxelles)
3. **Deutsch (de)** : CommunautÃ© germanophone de Belgique
4. **English (en)** : International (syndics multinationales)

**Statistiques Belgique** :

- ðŸ‡³ðŸ‡± NÃ©erlandais : 60% (Flandre)
- ðŸ‡«ðŸ‡· FranÃ§ais : 40% (Wallonie + Bruxelles bilingue)
- ðŸ‡©ðŸ‡ª Allemand : < 1% (CommunautÃ© germanophone)

Structure Fichiers Traduction
------------------------------

**Localisation** : ``frontend/src/locales/``

.. code-block:: text

   locales/
   â”œâ”€â”€ nl.json  # NÃ©erlandais (rÃ©fÃ©rence)
   â”œâ”€â”€ fr.json  # FranÃ§ais
   â”œâ”€â”€ de.json  # Allemand
   â””â”€â”€ en.json  # Anglais

**Format JSON plat** :

.. code-block:: json

   {
     "nav.dashboard": "Dashboard",
     "nav.buildings": "Immeubles",
     "nav.owners": "CopropriÃ©taires",
     "nav.expenses": "Charges",
     "nav.meetings": "AssemblÃ©es",
     "nav.documents": "Documents",
     "nav.reports": "Rapports",
     "nav.settings": "ParamÃ¨tres",

     "building.create": "CrÃ©er un immeuble",
     "building.name": "Nom de l'immeuble",
     "building.address": "Adresse",
     "building.city": "Ville",
     "building.total_units": "Nombre de lots",

     "error.network": "Erreur rÃ©seau",
     "error.unauthorized": "Non autorisÃ©",
     "success.saved": "EnregistrÃ© avec succÃ¨s"
   }

**Conventions de Nommage** :

- ``[section].[clÃ©]`` : ex: ``nav.dashboard``, ``building.create``
- Utiliser snake_case pour les clÃ©s : ``total_units`` pas ``totalUnits``
- PrÃ©fixes communs : ``nav.*``, ``error.*``, ``success.*``, ``button.*``

Utilisation dans Components
----------------------------

**Import** :

.. code-block:: svelte

   <script lang="ts">
     import { _ } from 'svelte-i18n';
   </script>

**Dans le Template** :

.. code-block:: svelte

   <h1>{$_('nav.dashboard')}</h1>
   <button>{$_('building.create')}</button>
   <p>{$_('error.network')}</p>

**Avec ParamÃ¨tres** :

.. code-block:: json

   {
     "welcome.message": "Bienvenue, {name}!",
     "building.units_count": "{count} lot(s)"
   }

.. code-block:: svelte

   <h1>{$_('welcome.message', { values: { name: user.firstName } })}</h1>
   <p>{$_('building.units_count', { values: { count: building.total_units } })}</p>

**Pluralisation** :

.. code-block:: json

   {
     "building.units": "{count, plural, =0 {aucun lot} one {1 lot} other {# lots}}"
   }

.. code-block:: svelte

   <p>{$_('building.units', { values: { count: totalUnits } })}</p>

**Format Dates/Nombres** :

.. code-block:: svelte

   <script>
     import { date, number } from 'svelte-i18n';
   </script>

   <p>{$date(new Date(), { format: 'short' })}</p>
   <p>{$number(1234.56, { style: 'currency', currency: 'EUR' })}</p>

Changement de Langue
--------------------

**LanguageSelector Component** :

.. code-block:: svelte

   <script lang="ts">
     import { locale } from 'svelte-i18n';
     import { languages } from '../lib/i18n';

     function changeLanguage(code: string) {
       $locale = code;
       localStorage.setItem('koprogo_locale', code);
     }
   </script>

   <select bind:value={$locale} on:change={(e) => changeLanguage(e.target.value)}>
     {#each languages as lang}
       <option value={lang.code}>
         {lang.flag} {lang.name}
       </option>
     {/each}
   </select>

**Persistance** :

.. code-block:: typescript

   // Sauvegarder prÃ©fÃ©rence
   locale.subscribe(value => {
     if (value) {
       localStorage.setItem('koprogo_locale', value);
     }
   });

   // Restaurer au chargement
   const savedLocale = localStorage.getItem('koprogo_locale');
   if (savedLocale) {
     locale.set(savedLocale);
   }

IntÃ©gration Backend
-------------------

Le header ``Accept-Language`` est automatiquement envoyÃ© dans ``api.ts`` :

.. code-block:: typescript

   // frontend/src/lib/api.ts
   function getCurrentLanguage(): string {
     const currentLocale = get(locale);
     return currentLocale || "nl";
   }

   function getHeaders(): HeadersInit {
     return {
       "Accept-Language": getCurrentLanguage(),
       // ...
     };
   }

Le backend peut lire ce header pour renvoyer messages d'erreur localisÃ©s :

.. code-block:: rust

   // backend/src/infrastructure/web/handlers/
   use actix_web::HttpRequest;

   fn get_language(req: &HttpRequest) -> String {
       req.headers()
           .get("accept-language")
           .and_then(|v| v.to_str().ok())
           .unwrap_or("nl")
           .to_string()
   }

Maintenance Traductions
-----------------------

**Workflow** :

1. **Ajouter clÃ© dans nl.json** (langue rÃ©fÃ©rence)
2. **Traduire dans fr.json, de.json, en.json**
3. **Utiliser dans composants** : ``$_('nouvelle.cle')``
4. **Tester changement de langue** : SÃ©lecteur de langue

**Script de VÃ©rification** :

.. code-block:: bash

   # Trouver clÃ©s manquantes
   npm run check-i18n

   # GÃ©nÃ©rer rapport diffÃ©rences
   npm run i18n-diff

**Outil RecommandÃ©** : ``i18n-ally`` (VS Code extension)

- Visualisation inline des traductions
- DÃ©tection clÃ©s manquantes
- Ã‰dition multi-langues simultanÃ©e

ClÃ©s Manquantes
---------------

Si une clÃ© n'existe pas, ``svelte-i18n`` affiche la clÃ© elle-mÃªme :

.. code-block:: svelte

   {$_('cle.inexistante')}
   <!-- Affiche: "cle.inexistante" -->

**En dÃ©veloppement** : Ajouter warning console

.. code-block:: typescript

   init({
     fallbackLocale: "nl",
     warnOnMissingMessages: true  // Warning si clÃ© manquante
   });

Tests i18n
----------

.. code-block:: typescript

   // tests/unit/i18n.test.ts
   import { get } from 'svelte/store';
   import { _, locale } from 'svelte-i18n';
   import '../src/lib/i18n';

   describe('i18n', () => {
     it('should load French translations', async () => {
       locale.set('fr');
       await new Promise(resolve => setTimeout(resolve, 100));

       const translation = get(_)('nav.dashboard');
       expect(translation).toBe('Tableau de bord');
     });

     it('should fallback to Dutch if key missing', async () => {
       locale.set('en');
       await new Promise(resolve => setTimeout(resolve, 100));

       const translation = get(_)('some.missing.key');
       expect(translation).toBeTruthy();
     });
   });

SEO et HTML lang
----------------

Le frontend doit mettre Ã  jour ``<html lang="...">`` :

.. code-block:: astro

   ---
   // layouts/Layout.astro
   import { locale } from 'svelte-i18n';

   const currentLocale = locale.get() || 'nl';
   ---
   <html lang={currentLocale}>

**Pour SEO multilingue** :

.. code-block:: astro

   <head>
     <link rel="alternate" hreflang="nl" href="https://koprogo.be/nl" />
     <link rel="alternate" hreflang="fr" href="https://koprogo.be/fr" />
     <link rel="alternate" hreflang="de" href="https://koprogo.be/de" />
     <link rel="alternate" hreflang="en" href="https://koprogo.be/en" />
   </head>

Extensions Futures
------------------

1. **Routes localisÃ©es** :

   - ``/nl/dashboard`` â†’ Nederlands
   - ``/fr/tableau-de-bord`` â†’ FranÃ§ais

2. **Traduction dynamique** :

   Charger traductions depuis API (CMS, base de donnÃ©es).

3. **Traduction automatique** :

   Utiliser DeepL API pour gÃ©nÃ©rer traductions initiales.

4. **Format de dates rÃ©gional** :

   - nl : dd/mm/yyyy
   - fr : dd/mm/yyyy
   - de : dd.mm.yyyy
   - en : mm/dd/yyyy

5. **Devise rÃ©gionale** :

   - Belgique : EUR (â‚¬)
   - Format : 1.234,56 â‚¬ (nl/fr/de) vs 1,234.56 â‚¬ (en)

RÃ©fÃ©rences
----------

- Documentation svelte-i18n : https://github.com/kaisermann/svelte-i18n
- Traductions : ``frontend/src/locales/``
- LanguageSelector : ``frontend/src/components/LanguageSelector.svelte``
- API Integration : ``frontend/src/lib/api.ts``
