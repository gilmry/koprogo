
üé• Guide des Tests E2E avec Documentation Vid√©o
===============================================

KoproGo utilise Playwright pour les tests End-to-End qui g√©n√®rent automatiquement des **vid√©os de documentation vivante** !

üéØ Qu'est-ce que c'est ?
------------------------

Les tests E2E testent **toute la stack** :


* ‚úÖ Frontend (Astro + Svelte)
* ‚úÖ Backend (Rust + Actix-web)
* ‚úÖ Base de donn√©es (PostgreSQL)
* ‚úÖ API REST
* ‚úÖ PWA + Mode Offline

Chaque test g√©n√®re une **vid√©o** qui montre exactement comment l'application fonctionne !

üöÄ D√©marrage Rapide
-------------------

1. Installation (une seule fois)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. code-block:: bash

   cd frontend
   npm install
   npm run test:install  # Installe Playwright + Chromium

2. D√©marrer les Services
^^^^^^^^^^^^^^^^^^^^^^^^

**Terminal 1 - Backend:**

.. code-block:: bash

   cd backend
   docker-compose up -d postgres  # Si pas d√©j√† d√©marr√©
   cargo run

**Terminal 2 - Frontend (optionnel si test:e2e d√©marre d√©j√† le serveur):**

.. code-block:: bash

   cd frontend
   npm run dev

3. Lancer les Tests
^^^^^^^^^^^^^^^^^^^

.. code-block:: bash

   cd frontend
   npm run test:e2e  # Ex√©cute tous les tests + g√©n√®re les vid√©os

4. Voir les Vid√©os ! üé¨
^^^^^^^^^^^^^^^^^^^^^^^

.. code-block:: bash

   npm run test:e2e:report  # Ouvre le rapport HTML avec vid√©os int√©gr√©es

üìπ Vid√©os G√©n√©r√©es
------------------

Apr√®s chaque ex√©cution, vous trouverez les vid√©os dans :

.. code-block::

   frontend/test-results/
   ‚îú‚îÄ‚îÄ auth-Authentication-Flow-should-login-successfully-chromium/
   ‚îÇ   ‚îî‚îÄ‚îÄ video.webm  ‚Üê Vid√©o du parcours de login
   ‚îú‚îÄ‚îÄ pwa-offline-PWA-Capabilities-should-work-offline-chromium/
   ‚îÇ   ‚îî‚îÄ‚îÄ video.webm  ‚Üê Vid√©o du mode offline
   ‚îî‚îÄ‚îÄ dashboards-Syndic-Dashboard-chromium/
       ‚îî‚îÄ‚îÄ video.webm  ‚Üê Vid√©o du dashboard

üé¨ Commandes Disponibles
------------------------

.. code-block:: bash

   # Mode Headless (CI/CD) - G√©n√®re les vid√©os
   npm run test:e2e

   # Mode UI - Interface graphique interactive
   npm run test:e2e:ui

   # Mode Headed - Voir le navigateur en action
   npm run test:e2e:headed

   # Mode Debug - Debug pas √† pas
   npm run test:e2e:debug

   # Voir le rapport avec vid√©os
   npm run test:e2e:report

üìù Tests Disponibles
--------------------

1. Tests d'Authentification (\ ``auth.spec.ts``\ )
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. code-block:: bash

   npx playwright test auth.spec.ts

**Ce qui est test√© :**


* ‚úÖ Page de login accessible
* ‚úÖ Login avec appel API backend r√©el
* ‚úÖ Redirection vers dashboard selon le r√¥le
* ‚úÖ Gestion d'erreurs (mauvais password)
* ‚úÖ Persistance de session (localStorage + IndexedDB)
* ‚úÖ Logout complet
* ‚úÖ Cr√©ation de comptes pour chaque r√¥le

**Vid√©o g√©n√©r√©e :** Parcours complet d'un utilisateur qui se connecte.

2. Tests des Dashboards (\ ``dashboards.spec.ts``\ )
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. code-block:: bash

   npx playwright test dashboards.spec.ts

**Ce qui est test√© :**


* ‚úÖ Dashboard Syndic (gestion immeubles)
* ‚úÖ Dashboard Comptable (finances)
* ‚úÖ Dashboard Copropri√©taire (infos personnelles)
* ‚úÖ Dashboard SuperAdmin (vue plateforme)
* ‚úÖ Navigation entre sections
* ‚úÖ Permissions par r√¥le

**Vid√©os g√©n√©r√©es :** Un parcours pour chaque type d'utilisateur.

3. Tests PWA et Offline (\ ``pwa-offline.spec.ts``\ )
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. code-block:: bash

   npx playwright test pwa-offline.spec.ts

**Ce qui est test√© :**


* ‚úÖ Manifest.json valide
* ‚úÖ Service Worker enregistr√©
* ‚úÖ Indicateur online/offline
* ‚úÖ IndexedDB utilis√©
* ‚úÖ Mode offline fonctionnel
* ‚úÖ Queue de synchronisation

**Vid√©os g√©n√©r√©es :** D√©monstration du mode offline.

üéì Cas d'Usage des Vid√©os
-------------------------

1. Documentation d'√âquipe
^^^^^^^^^^^^^^^^^^^^^^^^^

.. code-block:: bash

   # G√©n√©rer les vid√©os
   npm run test:e2e

   # Partager le rapport
   npm run test:e2e:report
   # Envoyer le lien dans Slack/Teams

2. Onboarding D√©veloppeurs
^^^^^^^^^^^^^^^^^^^^^^^^^^

Les vid√©os montrent **exactement** comment l'application fonctionne :


* Parcours utilisateur complet
* Interactions frontend-backend
* Mode offline en action

3. Pr√©sentation Client/Stakeholders
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. code-block:: bash

   # Ex√©cuter les tests en mode headed pour montrer en direct
   npm run test:e2e:headed

   # Ou partager les vid√©os du dernier run
   npm run test:e2e:report

4. Debugging
^^^^^^^^^^^^

Si un test √©choue, la vid√©o montre **exactement** ce qui s'est pass√© :

.. code-block:: bash

   npm run test:e2e:report
   # Cliquer sur le test qui a √©chou√©
   # Voir la vid√©o + screenshots + traces

üîß Configuration
----------------

Modifier la qualit√© vid√©o
^^^^^^^^^^^^^^^^^^^^^^^^^

Dans ``frontend/playwright.config.ts`` :

.. code-block:: typescript

   video: {
     mode: 'on',  // Toujours enregistrer
     size: { width: 1920, height: 1080 }  // HD
   }

Garder les vid√©os m√™me en cas de succ√®s
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Par d√©faut, **toutes les vid√©os sont gard√©es** (\ ``mode: 'on'``\ ) pour la documentation.

Pour √©conomiser l'espace :

.. code-block:: typescript

   video: {
     mode: 'retain-on-failure'  // Seulement en cas d'√©chec
   }

ü§ñ CI/CD avec GitHub Actions
----------------------------

Le workflow ``.github/workflows/e2e-tests.yml`` :


#. ‚úÖ Lance le backend + PostgreSQL
#. ‚úÖ Ex√©cute tous les tests E2E
#. ‚úÖ G√©n√®re les vid√©os
#. üì¶ Sauvegarde les vid√©os comme **artifacts GitHub**
#. üí¨ Commente la PR avec lien vers les vid√©os

Voir les vid√©os dans GitHub Actions
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^


#. Aller dans **Actions** tab
#. S√©lectionner le workflow run
#. Descendre vers **Artifacts**
#. T√©l√©charger ``test-videos-XXX.zip``

Les vid√©os sont gard√©es **30 jours** !

üìä Rapport HTML Interactif
--------------------------

Le rapport HTML contient :

.. code-block::

   playwright-report/
   ‚îú‚îÄ‚îÄ index.html          ‚Üê Page principale
   ‚îú‚îÄ‚îÄ data/               ‚Üê Donn√©es des tests
   ‚îî‚îÄ‚îÄ trace/              ‚Üê Traces Playwright

**Contenu du rapport :**


* üé• Vid√©os de chaque test (embedded)
* üì∏ Screenshots √† chaque √©tape
* üìù Logs de console
* ‚è±Ô∏è Timeline d'ex√©cution
* üîç Traces interactives

.. code-block:: bash

   npm run test:e2e:report  # Ouvre dans le navigateur

üé® √âcrire de Nouveaux Tests
---------------------------

Template de Base
^^^^^^^^^^^^^^^^

.. code-block:: typescript

   import { test, expect } from '@playwright/test';

   test('Mon nouveau test', async ({ page }) => {
     // Se connecter (si besoin)
     await page.goto('/login');
     await page.fill('input[type="email"]', 'test@test.com');
     await page.fill('input[type="password"]', 'test123');
     await page.click('button[type="submit"]');

     // Tester ma fonctionnalit√©
     await page.click('text=Ma Fonctionnalit√©');
     await expect(page.locator('text=Succ√®s')).toBeVisible();
   });

Test avec Cr√©ation d'Utilisateur
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. code-block:: typescript

   test('Mon test avec nouvel utilisateur', async ({ page }) => {
     // Cr√©er un utilisateur via l'API
     const response = await page.request.post('http://127.0.0.1:8080/api/v1/auth/register', {
       data: {
         email: `user-${Date.now()}@test.com`,
         password: 'test123',
         first_name: 'Test',
         last_name: 'User',
         role: 'syndic'
       }
     });

     const { user } = await response.json();

     // Login avec ce compte
     await page.goto('/login');
     await page.fill('input[type="email"]', user.email);
     await page.fill('input[type="password"]', 'test123');
     await page.click('button[type="submit"]');

     // Faire quelque chose...
   });

La **vid√©o sera automatiquement g√©n√©r√©e** ! üé•

üêõ Probl√®mes Courants
---------------------

Backend pas d√©marr√©
^^^^^^^^^^^^^^^^^^^

**Erreur :**

.. code-block::

   Error: connect ECONNREFUSED 127.0.0.1:8080

**Solution :**

.. code-block:: bash

   cd backend
   cargo run

Base de donn√©es pas migr√©e
^^^^^^^^^^^^^^^^^^^^^^^^^^

**Erreur :**

.. code-block::

   relation "users" does not exist

**Solution :**

.. code-block:: bash

   cd backend
   sqlx migrate run

Timeout des tests
^^^^^^^^^^^^^^^^^

**Erreur :**

.. code-block::

   Timeout 30000ms exceeded

**Solution :**
Augmenter le timeout dans ``playwright.config.ts`` :

.. code-block:: typescript

   use: {
     navigationTimeout: 60000,  // 60 secondes
   }

Service Worker pas enregistr√©
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

**Solution :**
V√©rifier que le serveur de dev est d√©marr√© et que la PWA est bien configur√©e.

üìö Ressources
-------------


* `Documentation Playwright <https://playwright.dev>`_
* `Playwright Best Practices <https://playwright.dev/docs/best-practices>`_
* `Test Generator <https://playwright.dev/docs/codegen>`_

G√©n√©rer des Tests Automatiquement
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. code-block:: bash

   npx playwright codegen http://localhost:3000

Cela ouvre un navigateur et enregistre vos actions en code Playwright !

‚ú® Workflow Recommand√©
----------------------

D√©veloppement d'une Nouvelle Fonctionnalit√©
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^


#. 
   **D√©velopper** la fonctionnalit√© (frontend + backend)

#. 
   **√âcrire un test E2E** qui la valide :

   .. code-block:: bash

      # Cr√©er le fichier de test
      touch tests/e2e/ma-feature.spec.ts

#. 
   **Ex√©cuter le test en mode UI** pour le d√©velopper :

   .. code-block:: bash

      npm run test:e2e:ui

#. 
   **G√©n√©rer la vid√©o finale** :

   .. code-block:: bash

      npm run test:e2e

#. 
   **Partager la vid√©o** avec l'√©quipe/client :

   .. code-block:: bash

      npm run test:e2e:report

Pull Request
^^^^^^^^^^^^


#. Les tests s'ex√©cutent automatiquement via GitHub Actions
#. Les vid√©os sont upload√©es comme artifacts
#. Le bot commente la PR avec le lien vers les vid√©os
#. Reviewer peut voir exactement comment √ßa fonctionne ! üé¨

üéâ C'est Tout !
---------------

.. code-block:: bash

   # Quick Start
   cd frontend
   npm run test:install    # Installation (une fois)
   cd ../backend && cargo run &  # D√©marrer le backend
   cd ../frontend
   npm run test:e2e        # Lancer les tests
   npm run test:e2e:report # Voir les vid√©os !

**Les vid√©os sont votre documentation vivante !** üé•‚ú®

Elles montrent exactement comment l'application fonctionne, rempla√ßant des heures de documentation √©crite par des vid√©os claires et actualis√©es automatiquement.
