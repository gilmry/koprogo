===================================
Documentation Technique Koprogo
===================================

.. contents:: Table des mati√®res
   :depth: 3
   :local:

Introduction
============

Koprogo est une plateforme SaaS de gestion de copropri√©t√© d√©velopp√©e avec une stack moderne:

- **Backend**: Rust avec Actix-web et PostgreSQL
- **Frontend**: Astro + Svelte en mode PWA
- **Architecture**: Hexagonale (Ports & Adapters)
- **Multi-tenancy**: Support organisationnel complet
- **Authentification**: JWT avec r√¥les hi√©rarchiques

Vue d'ensemble du projet
========================

Structure g√©n√©rale
------------------

.. code-block:: text

    koprogo/
    ‚îú‚îÄ‚îÄ backend/           # API Rust/Actix-web
    ‚îÇ   ‚îú‚îÄ‚îÄ src/
    ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ main.rs           # Point d'entr√©e serveur
    ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ lib.rs            # Modules publics
    ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ domain/           # Entit√©s et logique m√©tier
    ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ application/      # Use cases et DTOs
    ‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ infrastructure/   # Adapteurs (DB, Web)
    ‚îÇ   ‚îú‚îÄ‚îÄ migrations/    # Migrations SQL
    ‚îÇ   ‚îú‚îÄ‚îÄ tests/         # Tests BDD et E2E
    ‚îÇ   ‚îî‚îÄ‚îÄ benches/       # Tests de charge
    ‚îÇ
    ‚îú‚îÄ‚îÄ frontend/          # Application Astro/Svelte
    ‚îÇ   ‚îú‚îÄ‚îÄ src/
    ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ pages/           # Pages Astro (routes)
    ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ components/      # Composants Svelte
    ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ lib/             # Utilitaires et stores
    ‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ layouts/         # Layouts Astro
    ‚îÇ   ‚îî‚îÄ‚îÄ tests/e2e/    # Tests E2E Playwright
    ‚îÇ
    ‚îú‚îÄ‚îÄ docs/             # Documentation (ce dossier)
    ‚îú‚îÄ‚îÄ docker-compose.yml
    ‚îî‚îÄ‚îÄ Makefile

Stack technique
---------------

Backend
~~~~~~~

.. list-table::
   :header-rows: 1
   :widths: 30 70

   * - Technologie
     - Utilisation
   * - **Rust** (edition 2021, nightly)
     - Langage backend avec performance et s√©curit√©
   * - **Actix-web** 4.11
     - Framework web asynchrone haute performance
   * - **SQLx** 0.8.6
     - Client PostgreSQL async avec migrations et macros
   * - **PostgreSQL** 15
     - Base de donn√©es relationnelle
   * - **bcrypt** 0.15
     - Hachage de mots de passe (cost 12)
   * - **jsonwebtoken** 9.3
     - Authentification JWT
   * - **uuid** 1.11
     - Identifiants uniques (v4)
   * - **chrono** 0.4
     - Gestion des dates/timestamps
   * - **validator** 0.18
     - Validation d√©clarative
   * - **serde** 1.0
     - S√©rialisation/d√©s√©rialisation JSON

Frontend
~~~~~~~~

.. list-table::
   :header-rows: 1
   :widths: 30 70

   * - Technologie
     - Utilisation
   * - **Astro** 5.x
     - Framework SSR/SSG pour pages et routing
   * - **Svelte** 5.x
     - Composants interactifs r√©actifs
   * - **TypeScript** 5.x
     - Typage statique
   * - **Vite** 6.x
     - Build tool et dev server
   * - **@vite-pwa/astro**
     - Support Progressive Web App
   * - **Workbox**
     - Service Worker et strat√©gies de cache
   * - **IndexedDB**
     - Base de donn√©es locale pour mode offline
   * - **Playwright**
     - Tests E2E avec vid√©os

DevOps
~~~~~~

.. list-table::
   :header-rows: 1
   :widths: 30 70

   * - Outil
     - Utilisation
   * - **Docker** / **docker-compose**
     - Conteneurisation et orchestration
   * - **GitHub Actions**
     - CI/CD avec workflows automatis√©s
   * - **Make**
     - Commandes de d√©veloppement
   * - **SQLx CLI**
     - Gestion des migrations et query cache

Architecture Hexagonale
========================

Principes
---------

L'application backend suit l'architecture hexagonale (Ports & Adapters):

.. code-block:: text

    ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê
    ‚îÇ                    INFRASTRUCTURE                           ‚îÇ
    ‚îÇ                                                             ‚îÇ
    ‚îÇ   ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê                      ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê   ‚îÇ
    ‚îÇ   ‚îÇ     Web      ‚îÇ                      ‚îÇ   Database   ‚îÇ   ‚îÇ
    ‚îÇ   ‚îÇ  (Actix-web) ‚îÇ                      ‚îÇ  (PostgreSQL)‚îÇ   ‚îÇ
    ‚îÇ   ‚îÇ   Handlers   ‚îÇ                      ‚îÇ Repositories ‚îÇ   ‚îÇ
    ‚îÇ   ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò                      ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò   ‚îÇ
    ‚îÇ          ‚îÇ                                      ‚îÇ          ‚îÇ
    ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò
               ‚îÇ                                      ‚îÇ
               ‚ñº                                      ‚ñº
    ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê
    ‚îÇ                    APPLICATION                              ‚îÇ
    ‚îÇ                                                             ‚îÇ
    ‚îÇ   ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê        ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê                 ‚îÇ
    ‚îÇ   ‚îÇ  Use Cases   ‚îÇ‚óÑ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î§     DTOs     ‚îÇ                 ‚îÇ
    ‚îÇ   ‚îÇ              ‚îÇ        ‚îÇ              ‚îÇ                 ‚îÇ
    ‚îÇ   ‚îÇ ‚Ä¢ AuthUseCases        ‚îÇ ‚Ä¢ LoginRequest                 ‚îÇ
    ‚îÇ   ‚îÇ ‚Ä¢ BuildingUseCases    ‚îÇ ‚Ä¢ BuildingDto                  ‚îÇ
    ‚îÇ   ‚îÇ ‚Ä¢ ...                 ‚îÇ ‚Ä¢ ...                          ‚îÇ
    ‚îÇ   ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò        ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò                 ‚îÇ
    ‚îÇ          ‚îÇ                                                  ‚îÇ
    ‚îÇ          ‚îÇ utilise                                          ‚îÇ
    ‚îÇ          ‚ñº                                                  ‚îÇ
    ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò
               ‚îÇ
               ‚ñº
    ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê
    ‚îÇ                       DOMAIN                                ‚îÇ
    ‚îÇ                                                             ‚îÇ
    ‚îÇ   ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê        ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê                 ‚îÇ
    ‚îÇ   ‚îÇ   Entities   ‚îÇ        ‚îÇ   Services   ‚îÇ                 ‚îÇ
    ‚îÇ   ‚îÇ              ‚îÇ        ‚îÇ              ‚îÇ                 ‚îÇ
    ‚îÇ   ‚îÇ ‚Ä¢ User               ‚îÇ ‚Ä¢ ExpenseCalculator             ‚îÇ
    ‚îÇ   ‚îÇ ‚Ä¢ Building           ‚îÇ                                 ‚îÇ
    ‚îÇ   ‚îÇ ‚Ä¢ Unit               ‚îÇ                                 ‚îÇ
    ‚îÇ   ‚îÇ ‚Ä¢ Owner              ‚îÇ                                 ‚îÇ
    ‚îÇ   ‚îÇ ‚Ä¢ Expense            ‚îÇ                                 ‚îÇ
    ‚îÇ   ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò        ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò                 ‚îÇ
    ‚îÇ                                                             ‚îÇ
    ‚îÇ   üìå C≈ìur m√©tier - Ind√©pendant des frameworks              ‚îÇ
    ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò

Flux de d√©pendances
-------------------

.. code-block:: text

    Infrastructure ‚îÄ‚îÄdepends on‚îÄ‚îÄ> Application ‚îÄ‚îÄdepends on‚îÄ‚îÄ> Domain
         (Web)                       (Use Cases)              (Entities)
         (DB)

    ‚úÖ Domain ne d√©pend de personne (pur m√©tier)
    ‚úÖ Application ne d√©pend que de Domain
    ‚úÖ Infrastructure d√©pend de Application et Domain

Avantages
---------

1. **Testabilit√©**: Chaque couche testable ind√©pendamment
2. **Maintenabilit√©**: S√©paration claire des responsabilit√©s
3. **√âvolutivit√©**: Changement de framework/DB sans toucher au m√©tier
4. **Business-centric**: La logique m√©tier est au centre

Documentation Backend
=====================

Point d'entr√©e
--------------

.. toctree::
   :maxdepth: 1

   backend/src/main
   backend/src/lib
   backend/src/config

Couche Domaine
--------------

Entit√©s m√©tier
~~~~~~~~~~~~~~

.. toctree::
   :maxdepth: 1

   backend/src/domain/entities/user
   backend/src/domain/entities/building
   backend/src/domain/entities/unit (√† documenter)
   backend/src/domain/entities/owner (√† documenter)
   backend/src/domain/entities/expense (√† documenter)
   backend/src/domain/entities/meeting (√† documenter)
   backend/src/domain/entities/document (√† documenter)
   backend/src/domain/entities/organization (√† documenter)

Services de domaine
~~~~~~~~~~~~~~~~~~~

.. toctree::
   :maxdepth: 1

   backend/src/domain/services/expense_calculator (√† documenter)

Couche Application
------------------

Use Cases
~~~~~~~~~

Les use cases orchestrent la logique m√©tier:

- ``auth_use_cases.rs`` - Authentification, login, register
- ``building_use_cases.rs`` - CRUD immeubles
- ``unit_use_cases.rs`` - CRUD lots
- ``owner_use_cases.rs`` - CRUD propri√©taires
- ``expense_use_cases.rs`` - CRUD charges

DTOs
~~~~

Data Transfer Objects pour les √©changes API:

- ``auth_dto.rs`` - LoginRequest, RegisterRequest, LoginResponse, Claims
- ``building_dto.rs`` - BuildingDto, CreateBuildingRequest
- ``unit_dto.rs`` - UnitDto, CreateUnitRequest
- ``owner_dto.rs`` - OwnerDto, CreateOwnerRequest
- ``expense_dto.rs`` - ExpenseDto, CreateExpenseRequest

Ports (Interfaces)
~~~~~~~~~~~~~~~~~~

Traits d√©finissant les contrats pour les repositories:

- ``user_repository.rs``
- ``organization_repository.rs``
- ``building_repository.rs``
- ``unit_repository.rs``
- ``owner_repository.rs``
- ``expense_repository.rs``
- ``meeting_repository.rs``
- ``document_repository.rs``

Couche Infrastructure
---------------------

Base de donn√©es
~~~~~~~~~~~~~~~

.. code-block:: text

    infrastructure/database/
    ‚îú‚îÄ‚îÄ mod.rs                    # Exports publics
    ‚îú‚îÄ‚îÄ pool.rs                   # Pool de connexions SQLx
    ‚îú‚îÄ‚îÄ seed.rs                   # Seeding de donn√©es (SuperAdmin, demo)
    ‚îî‚îÄ‚îÄ repositories/
        ‚îú‚îÄ‚îÄ user_repository_impl.rs
        ‚îú‚îÄ‚îÄ organization_repository_impl.rs
        ‚îú‚îÄ‚îÄ building_repository_impl.rs
        ‚îú‚îÄ‚îÄ unit_repository_impl.rs
        ‚îú‚îÄ‚îÄ owner_repository_impl.rs
        ‚îú‚îÄ‚îÄ expense_repository_impl.rs
        ‚îú‚îÄ‚îÄ meeting_repository_impl.rs
        ‚îî‚îÄ‚îÄ document_repository_impl.rs

Web (API REST)
~~~~~~~~~~~~~~

.. code-block:: text

    infrastructure/web/
    ‚îú‚îÄ‚îÄ mod.rs                    # Exports publics
    ‚îú‚îÄ‚îÄ app_state.rs              # √âtat partag√© de l'application
    ‚îú‚îÄ‚îÄ routes.rs                 # Configuration des routes
    ‚îî‚îÄ‚îÄ handlers/
        ‚îú‚îÄ‚îÄ auth_handlers.rs      # POST /api/v1/auth/login, /register, GET /me
        ‚îú‚îÄ‚îÄ seed_handlers.rs      # POST /api/v1/seed/demo, /clear
        ‚îú‚îÄ‚îÄ building_handlers.rs  # CRUD /api/v1/buildings
        ‚îú‚îÄ‚îÄ unit_handlers.rs      # CRUD /api/v1/units
        ‚îú‚îÄ‚îÄ owner_handlers.rs     # CRUD /api/v1/owners
        ‚îú‚îÄ‚îÄ expense_handlers.rs   # CRUD /api/v1/expenses
        ‚îî‚îÄ‚îÄ health.rs             # GET /health

Migrations SQL
--------------

Les migrations sont g√©r√©es par SQLx:

.. code-block:: bash

    backend/migrations/
    ‚îú‚îÄ‚îÄ 20240101_create_users.sql
    ‚îú‚îÄ‚îÄ 20240102_create_organizations.sql
    ‚îú‚îÄ‚îÄ 20240103_create_buildings.sql
    ‚îú‚îÄ‚îÄ 20240104_create_units.sql
    ‚îú‚îÄ‚îÄ 20240105_create_owners.sql
    ‚îú‚îÄ‚îÄ 20240106_create_expenses.sql
    ‚îî‚îÄ‚îÄ ...

Ex√©cuter les migrations:

.. code-block:: bash

    cd backend
    sqlx migrate run

Documentation Frontend
======================

Structure
---------

.. code-block:: text

    frontend/src/
    ‚îú‚îÄ‚îÄ pages/                  # Routes Astro (SSR/SSG)
    ‚îÇ   ‚îú‚îÄ‚îÄ index.astro        # Landing page
    ‚îÇ   ‚îú‚îÄ‚îÄ login.astro        # Page de connexion
    ‚îÇ   ‚îú‚îÄ‚îÄ admin/
    ‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ index.astro    # Dashboard SuperAdmin
    ‚îÇ   ‚îú‚îÄ‚îÄ syndic/
    ‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ index.astro    # Dashboard Syndic
    ‚îÇ   ‚îú‚îÄ‚îÄ accountant/
    ‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ index.astro    # Dashboard Comptable
    ‚îÇ   ‚îú‚îÄ‚îÄ owner/
    ‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ index.astro    # Dashboard Copropri√©taire
    ‚îÇ   ‚îî‚îÄ‚îÄ buildings/
    ‚îÇ       ‚îî‚îÄ‚îÄ index.astro    # Liste des immeubles
    ‚îÇ
    ‚îú‚îÄ‚îÄ components/             # Composants Svelte
    ‚îÇ   ‚îú‚îÄ‚îÄ LoginForm.svelte
    ‚îÇ   ‚îú‚îÄ‚îÄ Navigation.svelte
    ‚îÇ   ‚îú‚îÄ‚îÄ SyncStatus.svelte
    ‚îÇ   ‚îú‚îÄ‚îÄ BuildingList.svelte
    ‚îÇ   ‚îî‚îÄ‚îÄ dashboards/
    ‚îÇ       ‚îú‚îÄ‚îÄ AdminDashboard.svelte
    ‚îÇ       ‚îú‚îÄ‚îÄ SyndicDashboard.svelte
    ‚îÇ       ‚îú‚îÄ‚îÄ AccountantDashboard.svelte
    ‚îÇ       ‚îî‚îÄ‚îÄ OwnerDashboard.svelte
    ‚îÇ
    ‚îú‚îÄ‚îÄ lib/                    # Utilitaires et configuration
    ‚îÇ   ‚îú‚îÄ‚îÄ config.ts          # Configuration API centralis√©e
    ‚îÇ   ‚îú‚îÄ‚îÄ types.ts           # Types TypeScript
    ‚îÇ   ‚îú‚îÄ‚îÄ db.ts              # Wrapper IndexedDB
    ‚îÇ   ‚îî‚îÄ‚îÄ sync.ts            # Service de synchronisation
    ‚îÇ
    ‚îú‚îÄ‚îÄ stores/                 # Stores Svelte
    ‚îÇ   ‚îî‚îÄ‚îÄ auth.ts            # Store d'authentification
    ‚îÇ
    ‚îî‚îÄ‚îÄ layouts/
        ‚îî‚îÄ‚îÄ Layout.astro       # Layout principal

Fonctionnalit√©s cl√©s
--------------------

PWA (Progressive Web App)
~~~~~~~~~~~~~~~~~~~~~~~~~

- Service Worker avec Workbox
- Manifest PWA pour installation
- Mode offline avec IndexedDB
- Synchronisation bidirectionnelle

Authentification
~~~~~~~~~~~~~~~~

- JWT avec refresh token
- Persistance localStorage + IndexedDB
- Redirections selon r√¥le
- Middleware de protection des routes

Multi-r√¥les
~~~~~~~~~~~

- SuperAdmin: acc√®s plateforme complet
- Syndic: gestion compl√®te immeubles
- Accountant: acc√®s finances
- Owner: consultation limit√©e

Tests E2E
=========

Framework: Playwright avec enregistrement vid√©o

.. code-block:: text

    frontend/tests/e2e/
    ‚îú‚îÄ‚îÄ config.ts              # Configuration des tests
    ‚îú‚îÄ‚îÄ auth.spec.ts           # Tests d'authentification (8 tests)
    ‚îú‚îÄ‚îÄ dashboards.spec.ts     # Tests des dashboards (8 tests)
    ‚îî‚îÄ‚îÄ pwa-offline.spec.ts    # Tests PWA/offline (8 tests)

Total: 24 tests E2E

Ex√©cuter les tests:

.. code-block:: bash

    cd frontend
    npm run test:e2e         # Mode headless avec vid√©os
    npm run test:e2e:ui      # Mode UI interactif
    npm run test:e2e:debug   # Mode debug pas √† pas

API REST
========

Authentification
----------------

.. code-block:: http

    POST /api/v1/auth/register
    Content-Type: application/json

    {
      "email": "user@example.com",
      "password": "password123",
      "first_name": "John",
      "last_name": "Doe",
      "role": "syndic"
    }

    Response 201:
    {
      "token": "eyJ...",
      "user": {
        "id": "uuid",
        "email": "user@example.com",
        "first_name": "John",
        "last_name": "Doe",
        "role": "syndic"
      }
    }

.. code-block:: http

    POST /api/v1/auth/login
    Content-Type: application/json

    {
      "email": "user@example.com",
      "password": "password123"
    }

    Response 200:
    {
      "token": "eyJ...",
      "user": { /* ... */ }
    }

.. code-block:: http

    GET /api/v1/auth/me
    Authorization: Bearer eyJ...

    Response 200:
    {
      "id": "uuid",
      "email": "user@example.com",
      "first_name": "John",
      "last_name": "Doe",
      "role": "syndic"
    }

Immeubles
---------

.. code-block:: http

    GET /api/v1/buildings
    Authorization: Bearer eyJ...

    Response 200:
    [
      {
        "id": "uuid",
        "name": "R√©sidence Les Jardins",
        "address": "123 Rue de la Paix",
        "city": "Paris",
        "postal_code": "75001",
        "country": "France",
        "total_units": 50
      }
    ]

Seeding
-------

.. code-block:: http

    POST /api/v1/seed/demo
    Authorization: Bearer eyJ... (SuperAdmin)

    Response 200:
    {
      "message": "Demo data created successfully",
      "users": [/* credentials */]
    }

    POST /api/v1/seed/clear
    Authorization: Bearer eyJ... (SuperAdmin)

    Response 200:
    {
      "message": "Demo data cleared successfully"
    }

Guides de d√©veloppement
=======================

Installation
------------

.. code-block:: bash

    # Cloner le projet
    git clone https://github.com/your-org/koprogo.git
    cd koprogo

    # Installation compl√®te
    make setup

    # D√©marrer les services
    make dev            # Backend seul
    make dev-frontend   # Frontend seul (autre terminal)
    make dev-all        # Tout en Docker

Commandes Make
--------------

.. code-block:: bash

    make help           # Affiche toutes les commandes disponibles
    make setup          # Installation compl√®te
    make dev            # D√©marre backend
    make dev-frontend   # D√©marre frontend
    make dev-all        # D√©marre tout avec Docker
    make test           # Run all tests
    make test-e2e       # Tests E2E avec vid√©os
    make clean          # Nettoyage

Workflow Git
------------

1. Cr√©er une branche feature:

   .. code-block:: bash

       git checkout -b feature/my-feature

2. D√©velopper et committer:

   .. code-block:: bash

       git add .
       git commit -m "feat: Add my feature"

3. Pousser et cr√©er PR:

   .. code-block:: bash

       git push origin feature/my-feature
       gh pr create

CI/CD
-----

GitHub Actions avec 3 workflows:

1. **Backend CI** (``.github/workflows/backend-ci.yml``)
   - Tests unitaires
   - Tests BDD
   - Clippy (linter)
   - Format check

2. **Frontend CI** (``.github/workflows/frontend-ci.yml``)
   - Tests E2E avec vid√©os
   - Build production
   - Lint TypeScript

3. **Full Stack CI** (``.github/workflows/full-ci.yml``)
   - Int√©gration compl√®te
   - Tests end-to-end complets

Variables d'environnement
==========================

Backend (.env)
--------------

.. code-block:: bash

    DATABASE_URL=postgresql://koprogo:koprogo123@localhost:5432/koprogo_db
    JWT_SECRET=your-super-secret-key-256-bits-min
    SERVER_HOST=127.0.0.1
    SERVER_PORT=8080
    RUST_LOG=info

Frontend (.env)
---------------

.. code-block:: bash

    PUBLIC_API_URL=http://127.0.0.1:8080

D√©ploiement
===========

Docker Production
-----------------

.. code-block:: bash

    # Build des images
    docker-compose build

    # D√©marrer en production
    docker-compose up -d

    # V√©rifier les logs
    docker-compose logs -f api
    docker-compose logs -f frontend

Variables pour production
~~~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: bash

    # Backend
    DATABASE_URL=postgresql://user:pass@prod-db:5432/koprogo_prod
    JWT_SECRET=$(openssl rand -base64 32)
    SERVER_HOST=0.0.0.0
    SERVER_PORT=8080

    # Frontend
    PUBLIC_API_URL=https://api.koprogo.com

S√©curit√©
========

Bonnes pratiques impl√©ment√©es
------------------------------

1. **Mots de passe**: Bcrypt avec cost factor 12
2. **JWT**: Tokens avec expiration 24h
3. **CORS**: Configuration restrictive en production
4. **SQL Injection**: Requ√™tes param√©tr√©es SQLx
5. **XSS**: √âchappement automatique Svelte
6. **Multi-tenant**: Isolation par organization_id
7. **Validation**: C√¥t√© serveur avec validator crate

SuperAdmin par d√©faut
----------------------

.. code-block:: text

    Email: admin@koprogo.com
    Password: admin123

    ‚ö†Ô∏è √Ä CHANGER EN PRODUCTION!

Glossaire
=========

.. glossary::

   Building
      Immeuble en copropri√©t√© g√©r√© par un syndic

   Unit
      Lot dans un immeuble (appartement, parking, cave)

   Owner
      Copropri√©taire poss√©dant un ou plusieurs lots

   Expense
      Charge ou d√©pense de copropri√©t√©

   Organization
      Entit√© multi-tenant (cabinet de syndic)

   SuperAdmin
      Administrateur plateforme avec acc√®s universel

   Syndic
      Gestionnaire de copropri√©t√©

   Accountant
      Comptable avec acc√®s limit√© aux finances

Ressources
==========

Documentation externe
---------------------

- `Rust Book <https://doc.rust-lang.org/book/>`_
- `Actix-web <https://actix.rs/>`_
- `SQLx <https://github.com/launchbadge/sqlx>`_
- `Astro <https://astro.build/>`_
- `Svelte <https://svelte.dev/>`_
- `Playwright <https://playwright.dev/>`_

Liens projet
------------

- Repository: (√† d√©finir)
- Issues: (√† d√©finir)
- Wiki: (√† d√©finir)

Contributeurs
=============

(Liste √† compl√©ter)

Licence
=======

(√Ä d√©finir)

Statut de la documentation
==========================

.. list-table::
   :header-rows: 1
   :widths: 50 20 30

   * - Section
     - Statut
     - Derni√®re MAJ
   * - Backend - Point d'entr√©e (main.rs, lib.rs, config.rs)
     - ‚úÖ Complet
     - 2025-10-22
   * - Backend - Entit√©s (User, Building)
     - ‚úÖ Complet
     - 2025-10-22
   * - Backend - Autres entit√©s
     - üöß √Ä faire
     - -
   * - Backend - Use Cases
     - üöß √Ä faire
     - -
   * - Backend - Repositories
     - üöß √Ä faire
     - -
   * - Backend - Handlers
     - üöß √Ä faire
     - -
   * - Frontend - Pages
     - üöß √Ä faire
     - -
   * - Frontend - Composants
     - üöß √Ä faire
     - -
   * - Frontend - Lib & Stores
     - üöß √Ä faire
     - -
   * - Configuration & DevOps
     - üöß √Ä faire
     - -

**L√©gende:**

- ‚úÖ Complet - Documentation d√©taill√©e avec exemples
- üöß √Ä faire - Section √† documenter
- ‚ö†Ô∏è Partiel - Documentation incompl√®te

---

Guides et Documentation D√©taill√©e
==================================

.. toctree::
   :maxdepth: 2
   :caption: Documentation Projet

   README
   changelog

.. toctree::
   :maxdepth: 2
   :caption: Business & Roadmap

   BUSINESS_PLAN_BOOTSTRAP
   INFRASTRUCTURE_ROADMAP

.. toctree::
   :maxdepth: 2
   :caption: Guides de D√©ploiement

   VPS_DEPLOYMENT
   DEPLOY_GITOPS

.. toctree::
   :maxdepth: 2
   :caption: Guides de D√©veloppement

   MAKEFILE_GUIDE
   E2E_TESTING_GUIDE
   PERFORMANCE_TESTING
   PERFORMANCE_REPORT

.. toctree::
   :maxdepth: 1
   :caption: Archives

   archive/BUSINESS_PLAN
   archive/MARKET_ANALYSIS
   archive/ROADMAP
   archive/ANALYSIS
   archive/SESSION_SUMMARY
   archive/NEW_ISSUES
   archive/PRIORITIES_TABLE
   archive/ISSUE_004_COMPLETION_GUIDE
   archive/load-tests-troubleshooting/PANIC_FIXES
   archive/load-tests-troubleshooting/IMPLEMENTATION_SUMMARY
   archive/load-tests-troubleshooting/TROUBLESHOOTING_401
   archive/load-tests-troubleshooting/CHANGELOG_RATE_LIMITING
   archive/root-md/DEPLOYMENT_VPS
   archive/root-md/infrastructure

.. toctree::
   :maxdepth: 2
   :caption: Entit√©s du Domaine

   backend/src/domain/entities/building
   backend/src/domain/entities/user
   backend/src/domain/entities/organization
   backend/src/domain/entities/unit
   backend/src/domain/entities/owner
   backend/src/domain/entities/expense
   backend/src/domain/entities/meeting
   backend/src/domain/entities/document

---

*Cette documentation est g√©n√©r√©e et maintenue pour le projet Koprogo.*
*Derni√®re mise √† jour: 2025-10-25*
