===================================
Documentation KoproGo ASBL
===================================

**KoproGo** : Plateforme opensource de gestion de copropri√©t√© d√©velopp√©e par une ASBL belge, utilisant des technologies de pointe pour r√©soudre un probl√®me soci√©tal avec un impact √©cologique minimal.

.. contents:: Table des mati√®res
   :depth: 3
   :local:

Introduction
============

KoproGo est un projet **holistique** qui combine :

‚úÖ **R√©solution d'un probl√®me soci√©tal** (gestion copropri√©t√©s en Belgique et Europe)
‚úÖ **Technologies de pointe** (Rust, GitOps, IA, Architecture Hexagonale)
‚úÖ **√âcologie** (< 0.5g CO2/requ√™te, 96% r√©duction vs solutions actuelles)
‚úÖ **Opensource et communautaire** (AGPL-3.0, ASBL, partage des recettes IA)
‚úÖ **S√©curit√© et conformit√©** (RGPD, souverainet√© des donn√©es, GitOps)
‚úÖ **P√©dagogie** (documentation exhaustive, onboarding facilit√©)

**Stack Technique** :
- **Backend**: Rust 1.83 + Actix-web 4.9 + PostgreSQL 15
- **Frontend**: Astro 4.x + Svelte 4.x (PWA offline-first)
- **Infrastructure**: Terraform + Ansible + GitOps (OVH Cloud)
- **Architecture**: Hexagonale (DDD) avec tests exhaustifs (Pyramid Strategy)

.. toctree::
   :maxdepth: 1
   :caption: üéØ Vision et Raison d'√ätre

   VISION

.. toctree::
   :maxdepth: 1
   :caption: üíº Mod√®le √âconomique

   BUSINESS_PLAN_BOOTSTRAP

.. toctree::
   :maxdepth: 1
   :caption: üöÄ Mission et Valeurs

   MISSION

=====================================
Sp√©cifications Techniques
=====================================

Architecture et Stack
=====================

Principes Architecturaux
-------------------------

KoproGo suit l'**architecture hexagonale** (Ports & Adapters) avec **Domain-Driven Design (DDD)** :

.. code-block:: text

    ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê
    ‚îÇ                    INFRASTRUCTURE                           ‚îÇ
    ‚îÇ                                                             ‚îÇ
    ‚îÇ   ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê                      ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê   ‚îÇ
    ‚îÇ   ‚îÇ     Web      ‚îÇ                      ‚îÇ   Database   ‚îÇ   ‚îÇ
    ‚îÇ   ‚îÇ  (Actix-web) ‚îÇ                      ‚îÇ  (PostgreSQL)‚îÇ   ‚îÇ
    ‚îÇ   ‚îÇ   Handlers   ‚îÇ                      ‚îÇ Repositories ‚îÇ   ‚îÇ
    ‚îÇ   ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò                      ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò   ‚îÇ
    ‚îÇ          ‚îÇ                                      ‚îÇ          ‚îÇ
    ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò
               ‚îÇ                                      ‚îÇ
               ‚ñº                                      ‚ñº
    ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê
    ‚îÇ                    APPLICATION                              ‚îÇ
    ‚îÇ                                                             ‚îÇ
    ‚îÇ   ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê        ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê                 ‚îÇ
    ‚îÇ   ‚îÇ  Use Cases   ‚îÇ‚óÑ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î§     DTOs     ‚îÇ                 ‚îÇ
    ‚îÇ   ‚îÇ              ‚îÇ        ‚îÇ              ‚îÇ                 ‚îÇ
    ‚îÇ   ‚îÇ ‚Ä¢ AuthUseCases        ‚îÇ ‚Ä¢ LoginRequest                 ‚îÇ
    ‚îÇ   ‚îÇ ‚Ä¢ BuildingUseCases    ‚îÇ ‚Ä¢ BuildingDto                  ‚îÇ
    ‚îÇ   ‚îÇ ‚Ä¢ ...                 ‚îÇ ‚Ä¢ ...                          ‚îÇ
    ‚îÇ   ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò        ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò                 ‚îÇ
    ‚îÇ          ‚îÇ                                                  ‚îÇ
    ‚îÇ          ‚îÇ utilise                                          ‚îÇ
    ‚îÇ          ‚ñº                                                  ‚îÇ
    ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò
               ‚îÇ
               ‚ñº
    ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê
    ‚îÇ                       DOMAIN                                ‚îÇ
    ‚îÇ                                                             ‚îÇ
    ‚îÇ   ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê        ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê                 ‚îÇ
    ‚îÇ   ‚îÇ   Entities   ‚îÇ        ‚îÇ   Services   ‚îÇ                 ‚îÇ
    ‚îÇ   ‚îÇ              ‚îÇ        ‚îÇ              ‚îÇ                 ‚îÇ
    ‚îÇ   ‚îÇ ‚Ä¢ User               ‚îÇ ‚Ä¢ ExpenseCalculator             ‚îÇ
    ‚îÇ   ‚îÇ ‚Ä¢ Building           ‚îÇ                                 ‚îÇ
    ‚îÇ   ‚îÇ ‚Ä¢ Unit               ‚îÇ                                 ‚îÇ
    ‚îÇ   ‚îÇ ‚Ä¢ Owner              ‚îÇ                                 ‚îÇ
    ‚îÇ   ‚îÇ ‚Ä¢ Expense            ‚îÇ                                 ‚îÇ
    ‚îÇ   ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò        ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò                 ‚îÇ
    ‚îÇ                                                             ‚îÇ
    ‚îÇ   üìå C≈ìur m√©tier - Ind√©pendant des frameworks              ‚îÇ
    ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò

**Flux de d√©pendances** :

.. code-block:: text

    Infrastructure ‚îÄ‚îÄdepends on‚îÄ‚îÄ> Application ‚îÄ‚îÄdepends on‚îÄ‚îÄ> Domain
         (Web)                       (Use Cases)              (Entities)
         (DB)

    ‚úÖ Domain ne d√©pend de personne (pur m√©tier)
    ‚úÖ Application ne d√©pend que de Domain
    ‚úÖ Infrastructure d√©pend de Application et Domain

**Avantages** :

1. **Testabilit√©** : Chaque couche testable ind√©pendamment
2. **Maintenabilit√©** : S√©paration claire des responsabilit√©s
3. **√âvolutivit√©** : Changement de framework/DB sans toucher au m√©tier
4. **Business-centric** : La logique m√©tier est au centre

Stack Technologique
-------------------

Backend
~~~~~~~

.. list-table::
   :header-rows: 1
   :widths: 30 70

   * - Technologie
     - Utilisation
   * - **Rust** 1.83
     - Langage backend avec performance et s√©curit√© m√©moire
   * - **Actix-web** 4.9
     - Framework web asynchrone (le plus rapide au monde)
   * - **SQLx** 0.8
     - Client PostgreSQL avec v√©rification compile-time
   * - **PostgreSQL** 15
     - Base de donn√©es relationnelle robuste
   * - **bcrypt** 0.15
     - Hachage mots de passe (cost 12)
   * - **jsonwebtoken** 9.3
     - Authentification JWT
   * - **uuid** 1.11
     - Identifiants uniques (v4)
   * - **chrono** 0.4
     - Gestion dates/timestamps
   * - **serde** 1.0
     - S√©rialisation/d√©s√©rialisation JSON

Frontend
~~~~~~~~

.. list-table::
   :header-rows: 1
   :widths: 30 70

   * - Technologie
     - Utilisation
   * - **Astro** 4.x
     - Framework SSG pour pages et routing
   * - **Svelte** 4.x
     - Composants interactifs r√©actifs (Islands Architecture)
   * - **TypeScript** 5.x
     - Typage statique
   * - **Vite** 6.x
     - Build tool et dev server
   * - **@vite-pwa/astro**
     - Support Progressive Web App
   * - **Workbox**
     - Service Worker et strat√©gies cache
   * - **IndexedDB**
     - Base de donn√©es locale (mode offline)
   * - **svelte-i18n**
     - Internationalisation (nl, fr, de, en)

Infrastructure
~~~~~~~~~~~~~~

.. list-table::
   :header-rows: 1
   :widths: 30 70

   * - Outil
     - Utilisation
   * - **Terraform** 1.0+
     - Infrastructure as Code (provisionning VPS OVH)
   * - **Ansible** 2.9+
     - Configuration Management (setup serveur)
   * - **Docker** 24+
     - Conteneurisation (Compose V2)
   * - **Traefik** 3.0
     - Reverse proxy + SSL Let's Encrypt
   * - **GitHub Actions**
     - CI/CD avec workflows automatis√©s
   * - **OVH Public Cloud**
     - H√©bergement VPS (GRA11 datacenter bas carbone)

Performance et √âcologie
-----------------------

**Objectifs Atteints** :

.. list-table::
   :header-rows: 1
   :widths: 40 30 30

   * - M√©trique
     - Cible
     - Actuel
   * - **Latency P99**
     - < 5ms
     - ~3.3ms ‚úÖ
   * - **Throughput**
     - > 100k req/s
     - Th√©orique ‚úÖ
   * - **Memory**
     - < 128MB
     - ~80MB ‚úÖ
   * - **Empreinte carbone**
     - < 0.5g CO2/requ√™te
     - 0.0026g ‚úÖ
   * - **Co√ªt infrastructure**
     - < 10‚Ç¨/mois
     - ~8‚Ç¨/mois ‚úÖ

**Comparaison Carbone** :

- **KoproGo cloud** : 5.3 kg CO2/an (2,000 copropri√©t√©s)
- **WordPress typique** : 120 kg CO2/an (1 site)
- **SaaS moyen** : 50 kg CO2/an (1 copropri√©t√©)
- **R√©duction** : **96% vs solutions actuelles** üå±

Documentation Backend
=====================

.. toctree::
   :maxdepth: 2
   :caption: ü¶Ä Backend Rust

   backend/index
   backend/src/domain/index
   backend/src/application/index
   backend/src/infrastructure/index
   backend/tests/index
   backend/benches/index

Documentation Frontend
======================

.. toctree::
   :maxdepth: 2
   :caption: üé® Frontend Astro + Svelte

   frontend/index
   frontend/lib/index
   frontend/components/index
   frontend/pages/index
   frontend/layouts/index
   frontend/stores/index
   frontend/locales/index

Documentation Infrastructure
=============================

.. toctree::
   :maxdepth: 2
   :caption: üèóÔ∏è Infrastructure (Terraform + Ansible)

   infrastructure/index
   infrastructure/terraform/index
   infrastructure/ansible/index

Guides de D√©ploiement
======================

.. toctree::
   :maxdepth: 2
   :caption: üöÄ D√©ploiement et GitOps

   deployment/index
   deployment/ovh-setup
   deployment/terraform-ansible
   deployment/gitops
   deployment/troubleshooting

Guides de D√©veloppement
========================

.. toctree::
   :maxdepth: 2
   :caption: üõ†Ô∏è Guides D√©veloppeurs

   MAKEFILE_GUIDE
   E2E_TESTING_GUIDE
   PERFORMANCE_TESTING
   PERFORMANCE_REPORT

=====================================
Structure du Projet
=====================================

Arborescence G√©n√©rale
======================

.. code-block:: text

    koprogo/
    ‚îú‚îÄ‚îÄ backend/                    # API Rust/Actix-web
    ‚îÇ   ‚îú‚îÄ‚îÄ src/
    ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ main.rs            # Point d'entr√©e serveur
    ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ lib.rs             # Modules publics
    ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ config.rs          # Configuration (env, DB)
    ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ domain/            # Couche Domain (DDD)
    ‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ entities/      # Entit√©s m√©tier (Building, Unit, etc.)
    ‚îÇ   ‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ services/      # Services domain (ExpenseCalculator)
    ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ application/       # Couche Application
    ‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ dto/           # Data Transfer Objects
    ‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ ports/         # Traits (interfaces)
    ‚îÇ   ‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ use_cases/     # Use Cases (orchestration)
    ‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ infrastructure/    # Couche Infrastructure
    ‚îÇ   ‚îÇ       ‚îú‚îÄ‚îÄ database/      # PostgreSQL (SQLx)
    ‚îÇ   ‚îÇ       ‚îî‚îÄ‚îÄ web/           # HTTP (Actix-web)
    ‚îÇ   ‚îú‚îÄ‚îÄ migrations/            # Migrations SQL (SQLx)
    ‚îÇ   ‚îú‚îÄ‚îÄ tests/                 # Tests integration, BDD, E2E
    ‚îÇ   ‚îî‚îÄ‚îÄ benches/               # Benchmarks Criterion
    ‚îÇ
    ‚îú‚îÄ‚îÄ frontend/                   # Application Astro/Svelte
    ‚îÇ   ‚îú‚îÄ‚îÄ src/
    ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ pages/             # Routes Astro (SSG)
    ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ components/        # Composants Svelte
    ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ lib/               # Utilitaires (API, config, DB, sync)
    ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ layouts/           # Layouts Astro
    ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ stores/            # Stores Svelte (auth)
    ‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ locales/           # Traductions i18n (nl, fr, de, en)
    ‚îÇ   ‚îî‚îÄ‚îÄ tests/e2e/             # Tests E2E Playwright
    ‚îÇ
    ‚îú‚îÄ‚îÄ infrastructure/             # Infrastructure as Code
    ‚îÇ   ‚îú‚îÄ‚îÄ terraform/             # Provisionning VPS OVH
    ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ main.tf            # Configuration Terraform
    ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ variables.tf       # Variables
    ‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ load-env.sh        # Chargement .env
    ‚îÇ   ‚îî‚îÄ‚îÄ ansible/               # Configuration serveur
    ‚îÇ       ‚îú‚îÄ‚îÄ playbook.yml       # Playbook principal
    ‚îÇ       ‚îú‚îÄ‚îÄ templates/         # Templates Jinja2 (systemd, .env)
    ‚îÇ       ‚îî‚îÄ‚îÄ files/             # Scripts (DNS OVH)
    ‚îÇ
    ‚îú‚îÄ‚îÄ deploy/production/          # D√©ploiement GitOps
    ‚îÇ   ‚îú‚îÄ‚îÄ docker-compose.yml     # Stack production
    ‚îÇ   ‚îî‚îÄ‚îÄ gitops-deploy.sh       # Script GitOps
    ‚îÇ
    ‚îú‚îÄ‚îÄ docs/                       # Documentation Sphinx
    ‚îÇ   ‚îú‚îÄ‚îÄ index.rst              # Ce fichier
    ‚îÇ   ‚îú‚îÄ‚îÄ VISION.md              # Vision du projet
    ‚îÇ   ‚îú‚îÄ‚îÄ MISSION.md             # Mission ASBL
    ‚îÇ   ‚îú‚îÄ‚îÄ BUSINESS_PLAN_BOOTSTRAP.md  # Business plan
    ‚îÇ   ‚îú‚îÄ‚îÄ backend/               # Docs backend
    ‚îÇ   ‚îú‚îÄ‚îÄ frontend/              # Docs frontend
    ‚îÇ   ‚îú‚îÄ‚îÄ infrastructure/        # Docs infrastructure
    ‚îÇ   ‚îî‚îÄ‚îÄ deployment/            # Guides d√©ploiement
    ‚îÇ
    ‚îú‚îÄ‚îÄ .github/workflows/          # CI/CD GitHub Actions
    ‚îú‚îÄ‚îÄ Makefile                    # Commandes d√©veloppement
    ‚îú‚îÄ‚îÄ CLAUDE.md                   # Instructions Claude Code
    ‚îî‚îÄ‚îÄ README.md                   # README principal

=====================================
Commandes D√©veloppement
=====================================

Installation
============

.. code-block:: bash

    # Cloner le projet
    git clone https://github.com/gilmry/koprogo.git
    cd koprogo

    # Installation compl√®te
    make setup

    # D√©marrer PostgreSQL seul
    make docker-up

    # Copier fichiers env
    cp backend/.env.example backend/.env
    cp frontend/.env.example frontend/.env

    # Run migrations
    make migrate

D√©veloppement
=============

.. code-block:: bash

    # Backend (localhost:8080)
    make dev                # Avec cargo-watch (auto-reload)
    # OU
    cd backend && cargo run

    # Frontend (localhost:3000)
    make dev-frontend
    # OU
    cd frontend && npm run dev

    # Tout avec Docker Compose
    make dev-all

Tests
=====

.. code-block:: bash

    # Tests unitaires (domain layer)
    cargo test --lib

    # Tests integration (testcontainers)
    cargo test --test integration
    # OU
    make test-integration

    # Tests BDD (Cucumber/Gherkin)
    cargo test --test bdd

    # Tests E2E (Playwright)
    make test-e2e
    # OU
    cd frontend && npm run test:e2e

    # Benchmarks (Criterion)
    cargo bench

    # Tous les tests
    make test

    # Coverage (tarpaulin)
    make coverage

Qualit√© du Code
===============

.. code-block:: bash

    # Format
    cargo fmt                # Backend
    npm run format          # Frontend (dans frontend/)
    make format             # Backend + Frontend

    # Lint
    cargo clippy -- -D warnings  # Backend
    make lint                    # Backend + Frontend

    # Audit s√©curit√©
    make audit

Build Production
================

.. code-block:: bash

    # Build release backend
    cargo build --release

    # Build release frontend
    cd frontend && npm run build

    # Build images Docker
    make docker-build

    # D√©marrer production
    docker-compose up -d

=====================================
API REST
=====================================

Base URL
========

- **Local** : ``http://localhost:8080/api/v1``
- **Production** : ``https://api.koprogo.be/api/v1``

Authentification
================

POST /auth/register
-------------------

.. code-block:: http

    POST /api/v1/auth/register
    Content-Type: application/json

    {
      "email": "user@example.com",
      "password": "password123",
      "first_name": "John",
      "last_name": "Doe",
      "role": "syndic"
    }

    Response 201:
    {
      "token": "eyJ...",
      "user": {
        "id": "uuid",
        "email": "user@example.com",
        "role": "syndic"
      }
    }

POST /auth/login
----------------

.. code-block:: http

    POST /api/v1/auth/login
    Content-Type: application/json

    {
      "email": "user@example.com",
      "password": "password123"
    }

    Response 200:
    {
      "token": "eyJ...",
      "user": { /* ... */ }
    }

GET /auth/me
------------

.. code-block:: http

    GET /api/v1/auth/me
    Authorization: Bearer eyJ...

    Response 200:
    {
      "id": "uuid",
      "email": "user@example.com",
      "role": "syndic"
    }

Immeubles (Buildings)
=====================

.. code-block:: http

    GET    /api/v1/buildings           # Liste pagin√©e
    POST   /api/v1/buildings           # Cr√©er
    GET    /api/v1/buildings/:id       # D√©tails
    PUT    /api/v1/buildings/:id       # Mettre √† jour
    DELETE /api/v1/buildings/:id       # Supprimer
    GET    /api/v1/buildings/:id/units    # Units d'un building

Lots (Units)
============

.. code-block:: http

    GET    /api/v1/units               # Liste
    POST   /api/v1/units               # Cr√©er
    GET    /api/v1/units/:id           # D√©tails
    PUT    /api/v1/units/:id           # Mettre √† jour
    DELETE /api/v1/units/:id           # Supprimer
    PUT    /api/v1/units/:id/assign-owner/:owner_id  # Assigner propri√©taire

Propri√©taires (Owners)
=======================

.. code-block:: http

    GET    /api/v1/owners              # Liste
    POST   /api/v1/owners              # Cr√©er
    GET    /api/v1/owners/:id          # D√©tails

Charges (Expenses)
==================

.. code-block:: http

    GET    /api/v1/expenses            # Liste
    POST   /api/v1/expenses            # Cr√©er
    GET    /api/v1/buildings/:id/expenses  # Expenses d'un building
    PUT    /api/v1/expenses/:id/mark-paid  # Marquer pay√©

Health Check
============

.. code-block:: http

    GET /api/v1/health

    Response 200:
    {
      "status": "healthy",
      "timestamp": "2025-10-26T12:00:00Z"
    }

=====================================
S√©curit√© et Conformit√©
=====================================

RGPD
====

**Principes Impl√©ment√©s** :

‚úÖ **Data Minimization** : Uniquement donn√©es n√©cessaires
‚úÖ **Droit √† l'oubli** : ``DELETE /users/:id`` (anonymisation)
‚úÖ **Portabilit√©** : Export CSV, JSON des donn√©es
‚úÖ **Consentement** : Cookies et analytics optionnels
‚úÖ **DPO** : Data Protection Officer d√©sign√©

S√©curit√©
========

**Mesures Impl√©ment√©es** :

1. **Chiffrement** : TLS 1.3 (Let's Encrypt)
2. **Authentification** : JWT avec rotation tokens
3. **Passwords** : Bcrypt (cost 12) + Argon2id (futur)
4. **SQL Injection** : SQLx compile-time checks
5. **XSS** : √âchappement automatique Svelte
6. **CORS** : Configuration restrictive production
7. **Firewall** : UFW (ports 22, 80, 443 uniquement)
8. **Fail2ban** : Protection bruteforce SSH
9. **GitOps** : Patches s√©curit√© en < 3 minutes

GitOps et S√©curit√©
==================

**Probl√®me R√©solu** : Fragmentation self-hosted

Self-hosted traditionnel :
- 70% des instances ne sont jamais mises √† jour
- Failles critiques non corrig√©es pendant des mois

**Solution KoproGo** :
- Service systemd v√©rifie GitHub toutes les 3 minutes
- Pull automatique des patches
- Rollback automatique si health check √©choue
- **100% des instances √† jour** automatiquement

=====================================
Contributions et Communaut√©
=====================================

Contribuer
==========

1. **Fork** le projet sur GitHub
2. **Cr√©er branche** : ``git checkout -b feature/my-feature``
3. **D√©velopper** en suivant les guidelines (CLAUDE.md)
4. **Tests** : ``make test`` (couverture > 80%)
5. **Commit** : ``git commit -m "feat: Add feature"`` (Conventional Commits)
6. **Push** : ``git push origin feature/my-feature``
7. **Pull Request** : Cr√©er PR avec description d√©taill√©e

**Issues "Good First Issue"** : https://github.com/gilmry/koprogo/labels/good%20first%20issue

Licence
=======

**AGPL-3.0** (Copyleft fort)

Code source public, contributions bienvenues, fork autoris√© si d√©rive du projet.

Contact
=======

- **GitHub** : https://github.com/gilmry/koprogo
- **Issues** : https://github.com/gilmry/koprogo/issues
- **Email ASBL** : contact@koprogo.be

=====================================
Glossaire
=====================================

.. glossary::

   ASBL
      Association sans But Lucratif (Belgique) - Organisation non-profit

   Building
      Immeuble en copropri√©t√© g√©r√© par un syndic

   Unit
      Lot dans un immeuble (appartement, parking, cave)

   Owner
      Copropri√©taire poss√©dant un ou plusieurs lots

   Expense
      Charge ou d√©pense de copropri√©t√©

   Organization
      Entit√© multi-tenant (cabinet de syndic)

   SuperAdmin
      Administrateur plateforme avec acc√®s universel

   Syndic
      Gestionnaire de copropri√©t√©

   Accountant
      Comptable avec acc√®s limit√© aux finances

   GitOps
      D√©ploiement continu bas√© sur Git (infrastructure as code)

   PWA
      Progressive Web App (application web installable, mode offline)

   DDD
      Domain-Driven Design (conception orient√©e m√©tier)

   Hexagonal Architecture
      Architecture Ports & Adapters (s√©paration couches m√©tier/infra)

=====================================
Ressources Externes
=====================================

Documentation Technologies
==========================

- `Rust Book <https://doc.rust-lang.org/book/>`_
- `Actix-web <https://actix.rs/>`_
- `SQLx <https://github.com/launchbadge/sqlx>`_
- `Astro <https://astro.build/>`_
- `Svelte <https://svelte.dev/>`_
- `Playwright <https://playwright.dev/>`_
- `Terraform <https://developer.hashicorp.com/terraform>`_
- `Ansible <https://docs.ansible.com/>`_

Liens Projet
============

- **Repository** : https://github.com/gilmry/koprogo
- **Issues** : https://github.com/gilmry/koprogo/issues
- **Discussions** : https://github.com/gilmry/koprogo/discussions
- **Wiki** : https://github.com/gilmry/koprogo/wiki

=====================================

*Documentation maintenue par la communaut√© KoproGo ASBL*

*Derni√®re mise √† jour : Octobre 2025*
