name: E2E Tests avec Documentation Vid√©o

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

permissions:
  contents: read
  actions: write
  pull-requests: write

jobs:
  e2e-tests:
    name: Tests E2E (Frontend + Backend)
    runs-on: ubuntu-latest
    timeout-minutes: 30

    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_USER: koprogo
          POSTGRES_PASSWORD: koprogo123
          POSTGRES_DB: koprogo_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Setup Node.js
        uses: actions/setup-node@v6
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Cache Cargo dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            backend/target/
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

      - name: Install Frontend dependencies
        working-directory: frontend
        run: npm ci

      - name: Install Playwright browsers
        working-directory: frontend
        run: npm run test:install

      - name: Setup database and run migrations
        working-directory: backend
        env:
          DATABASE_URL: postgresql://koprogo:koprogo123@localhost:5432/koprogo_db
        run: |
          cargo install sqlx-cli --no-default-features --features postgres
          sqlx migrate run

      - name: Build Backend
        working-directory: backend
        env:
          DATABASE_URL: postgresql://koprogo:koprogo123@localhost:5432/koprogo_db
        run: cargo build --release

      - name: Start Backend Server
        working-directory: backend
        env:
          DATABASE_URL: postgresql://koprogo:koprogo123@localhost:5432/koprogo_db
          JWT_SECRET: test-secret-for-ci
          SERVER_HOST: 127.0.0.1
          SERVER_PORT: 8080
        run: |
          cargo run --release &
          echo $! > backend.pid
          sleep 10

      - name: Verify Backend is running
        run: curl -f http://127.0.0.1:8080/api/v1/health || exit 1

      - name: Run E2E Tests
        working-directory: frontend
        run: npm run test:e2e

      - name: Stop Backend Server
        if: always()
        run: |
          if [ -f backend/backend.pid ]; then
            kill $(cat backend/backend.pid) || true
          fi

      # üìπ Upload VIDEOS as artifacts - DOCUMENTATION VIVANTE!
      - name: Upload Test Videos (Documentation)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-videos-${{ github.run_number }}
          path: frontend/test-results/**/*.webm
          retention-days: 30  # Garder 30 jours

      # üìä Upload HTML Report
      - name: Upload Playwright Report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: playwright-report-${{ github.run_number }}
          path: frontend/playwright-report/
          retention-days: 30

      # üì∏ Upload Screenshots
      - name: Upload Screenshots
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: test-screenshots-${{ github.run_number }}
          path: frontend/test-results/**/*.png
          retention-days: 14

      # üìù Comment PR with test results
      - name: Comment PR with test results
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v8
        with:
          script: |
            const runNumber = context.runNumber;
            const body = `## üé• Tests E2E Termin√©s

            Les vid√©os de documentation sont disponibles dans les artifacts :
            - üìπ [Vid√©os des tests](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})
            - üìä [Rapport HTML](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})

            Ces vid√©os servent de **documentation vivante** du comportement de l'application ! ‚ú®`;

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: body
            });

  # Optionnel : Publier les vid√©os sur une page GitHub
  publish-docs:
    name: Publier Documentation Vid√©o
    needs: e2e-tests
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pages: write

    steps:
      - name: Download test videos
        uses: actions/download-artifact@v4
        with:
          pattern: test-videos-*
          path: docs/videos/

      - name: Download Playwright report
        uses: actions/download-artifact@v4
        with:
          pattern: playwright-report-*
          path: docs/report/

      - name: Create index page
        run: |
          cat > docs/index.html << 'EOF'
          <!DOCTYPE html>
          <html>
          <head>
            <title>KoproGo - Documentation Vid√©o</title>
            <style>
              body { font-family: system-ui; max-width: 1200px; margin: 0 auto; padding: 20px; }
              h1 { color: #0F766E; }
              .video-grid { display: grid; grid-template-columns: repeat(auto-fit, minmax(400px, 1fr)); gap: 20px; }
              .video-card { border: 1px solid #ddd; border-radius: 8px; padding: 16px; }
              video { width: 100%; border-radius: 4px; }
            </style>
          </head>
          <body>
            <h1>üé• KoproGo - Documentation Vid√©o Vivante</h1>
            <p>Vid√©os g√©n√©r√©es automatiquement par les tests E2E (Build #${{ github.run_number }})</p>
            <h2><a href="report/">üìä Voir le Rapport Complet</a></h2>
            <div class="video-grid">
              <!-- Videos will be listed here -->
            </div>
          </body>
          </html>
          EOF

      # Publish to GitHub Pages if configured
      # - name: Deploy to GitHub Pages
      #   uses: peaceiris/actions-gh-pages@v3
      #   with:
      #     github_token: ${{ secrets.GITHUB_TOKEN }}
      #     publish_dir: ./docs
