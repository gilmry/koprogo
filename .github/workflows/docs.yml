# Deploy Rust + Sphinx documentation to GitHub Pages
name: Deploy Documentation to Pages

on:
  # Runs on pushes targeting the default branch
  push:
    branches: ["main"]
    paths:
      - 'docs/**'
      - 'backend/src/**'
      - 'backend/Cargo.toml'
      - '.github/workflows/docs.yml'

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
permissions:
  contents: read
  pages: write
  id-token: write

# Allow only one concurrent deployment, skipping runs queued between the run in-progress and latest queued.
# However, do NOT cancel in-progress runs as we want to allow these production deployments to complete.
concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  # Build both Rust and Sphinx documentation
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Rust
        uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          toolchain: stable

      - name: Setup Python
        uses: actions/setup-python@v6
        with:
          python-version: '3.11'

      - name: Install Sphinx dependencies
        run: |
          cd docs
          pip install -r requirements.txt

      - name: Generate video gallery page
        run: |
          python3 .claude/scripts/generate-video-rst.py

      - name: Build Rust documentation
        run: |
          cd backend
          SQLX_OFFLINE=true cargo doc --no-deps --release
        env:
          RUSTDOCFLAGS: "--default-theme=ayu"

      - name: Build Sphinx documentation
        run: |
          cd docs
          sphinx-build -M html . _build

      - name: Combine documentation
        run: |
          # Create combined docs directory
          mkdir -p _site

          # Copy Sphinx docs to /docs subdirectory
          mkdir -p _site/docs
          cp -r docs/_build/html/* _site/docs/

          # Copy Rust docs to /rust subdirectory
          mkdir -p _site/rust
          cp -r backend/target/doc/* _site/rust/

          # Create main index page
          cat > _site/index.html << 'EOF'
          <!DOCTYPE html>
          <html lang="en">
          <head>
              <meta charset="UTF-8">
              <meta name="viewport" content="width=device-width, initial-scale=1.0">
              <title>KoproGo Documentation</title>
              <style>
                  body {
                      font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, "Helvetica Neue", Arial, sans-serif;
                      max-width: 800px;
                      margin: 50px auto;
                      padding: 20px;
                      line-height: 1.6;
                  }
                  h1 { color: #2c3e50; }
                  .docs-links {
                      display: grid;
                      grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
                      gap: 20px;
                      margin-top: 30px;
                  }
                  .doc-card {
                      border: 2px solid #3498db;
                      border-radius: 8px;
                      padding: 25px;
                      text-decoration: none;
                      color: inherit;
                      transition: transform 0.2s, box-shadow 0.2s;
                  }
                  .doc-card:hover {
                      transform: translateY(-5px);
                      box-shadow: 0 5px 15px rgba(0,0,0,0.1);
                  }
                  .doc-card h2 {
                      margin-top: 0;
                      color: #3498db;
                  }
                  .doc-card p {
                      color: #666;
                      margin-bottom: 0;
                  }
              </style>
          </head>
          <body>
              <h1>üìö KoproGo Documentation</h1>
              <p>Bienvenue sur la documentation du projet KoproGo - Plateforme SaaS de gestion de copropri√©t√©s</p>

              <div class="docs-links">
                  <a href="docs/index.html" class="doc-card">
                      <h2>üìñ Documentation G√©n√©rale</h2>
                      <p>Architecture, guides de d√©ploiement, roadmap et documentation compl√®te du projet</p>
                  </a>

                  <a href="rust/koprogo_api/index.html" class="doc-card">
                      <h2>ü¶Ä API Documentation Rust</h2>
                      <p>Documentation technique de l'API backend g√©n√©r√©e par cargo doc</p>
                  </a>
              </div>
          </body>
          </html>
          EOF

      - name: Upload artifact
        uses: actions/upload-pages-artifact@v4
        with:
          path: '_site'

  # Deploy to GitHub Pages
  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
