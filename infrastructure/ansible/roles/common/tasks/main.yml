---
# Common Role - System preparation and base configuration

- name: Set hostname
  hostname:
    name: "{{ inventory_hostname }}"

- name: Update /etc/hosts
  lineinfile:
    path: /etc/hosts
    line: "{{ hostvars[item]['private_ip'] }} {{ item }}"
    state: present
  loop: "{{ groups['all'] }}"
  when: hostvars[item]['private_ip'] is defined

- name: Update apt cache
  apt:
    update_cache: yes
    cache_valid_time: 3600

- name: Upgrade all packages
  apt:
    upgrade: dist
    autoremove: yes
    autoclean: yes

- name: Install essential packages
  apt:
    name:
      - curl
      - wget
      - git
      - vim
      - htop
      - iotop
      - iftop
      - net-tools
      - dnsutils
      - ca-certificates
      - gnupg
      - lsb-release
      - apt-transport-https
      - software-properties-common
      - python3
      - python3-pip
      - jq
      - unzip
      - zip
      - tmux
      - screen
      - tree
      - rsync
      - nfs-common
      - open-iscsi
      - lvm2
    state: present

- name: Set timezone to UTC
  timezone:
    name: UTC

- name: Configure NTP
  systemd:
    name: systemd-timesyncd
    enabled: yes
    state: started

- name: Disable swap immediately
  command: swapoff -a
  when: ansible_swaptotal_mb > 0

- name: Disable swap permanently
  replace:
    path: /etc/fstab
    regexp: '^([^#].*?\sswap\s+.*)$'
    replace: '# \1'

- name: Load kernel modules
  copy:
    dest: /etc/modules-load.d/k8s.conf
    content: |
      overlay
      br_netfilter
    mode: '0644'

- name: Load modules now
  modprobe:
    name: "{{ item }}"
    state: present
  loop:
    - overlay
    - br_netfilter

- name: Configure sysctl for Kubernetes
  sysctl:
    name: "{{ item.key }}"
    value: "{{ item.value }}"
    state: present
    sysctl_file: /etc/sysctl.d/99-kubernetes.conf
    reload: yes
  loop:
    - { key: 'net.bridge.bridge-nf-call-iptables', value: '1' }
    - { key: 'net.bridge.bridge-nf-call-ip6tables', value: '1' }
    - { key: 'net.ipv4.ip_forward', value: '1' }
    - { key: 'net.ipv4.conf.all.forwarding', value: '1' }
    - { key: 'net.ipv6.conf.all.forwarding', value: '1' }
    - { key: 'vm.overcommit_memory', value: '1' }
    - { key: 'kernel.panic', value: '10' }
    - { key: 'kernel.panic_on_oops', value: '1' }
    - { key: 'fs.inotify.max_user_instances', value: '8192' }
    - { key: 'fs.inotify.max_user_watches', value: '524288' }

- name: Increase file limits
  pam_limits:
    domain: '*'
    limit_type: "{{ item.type }}"
    limit_item: "{{ item.item }}"
    value: "{{ item.value }}"
  loop:
    - { type: 'soft', item: 'nofile', value: '65536' }
    - { type: 'hard', item: 'nofile', value: '65536' }
    - { type: 'soft', item: 'nproc', value: '65536' }
    - { type: 'hard', item: 'nproc', value: '65536' }

- name: Create koprogo directory
  file:
    path: /etc/koprogo
    state: directory
    mode: '0755'

- name: Set node labels
  copy:
    dest: /etc/koprogo/labels
    content: |
      environment={{ environment }}
      node_type={{ node_type }}
      cluster={{ cluster_name | default('koprogo') }}
    mode: '0644'

- name: Reboot if kernel was updated
  reboot:
    msg: "Reboot initiated by Ansible for kernel updates"
    connect_timeout: 5
    reboot_timeout: 300
    pre_reboot_delay: 0
    post_reboot_delay: 30
    test_command: uptime
  when: ansible_kernel != ansible_kernel_version and reboot_allowed | default(false)
