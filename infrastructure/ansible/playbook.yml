---
# Playbook Ansible pour configurer un VPS OVH pour KoproGo
# Installe Docker, Git, configure firewall, et déploie KoproGo avec GitOps

- name: Configure KoproGo VPS with GitOps Auto-Update
  hosts: koprogo
  become: yes
  vars:
    koprogo_user: koprogo
    koprogo_repo: https://github.com/gilmry/koprogo.git
    koprogo_branch: main
    koprogo_dir: /home/{{ koprogo_user }}/koprogo
    koprogo_domain: "{{ lookup('env', 'KOPROGO_DOMAIN') | default('', true) }}"
    frontend_domain: "{{ lookup('env', 'KOPROGO_FRONTEND_DOMAIN') | default('', true) }}"
    api_domain: "{{ lookup('env', 'KOPROGO_API_DOMAIN') | default('', true) }}"
    enable_ssl: "{{ koprogo_domain != '' }}"
    acme_email: "{{ lookup('env', 'ACME_EMAIL') | default('admin@example.com', true) }}"

  tasks:
    # ==========================================
    # 1. Mise à jour système
    # ==========================================
    - name: Update apt cache
      apt:
        update_cache: yes
        cache_valid_time: 3600

    - name: Upgrade all packages
      apt:
        upgrade: dist
        autoremove: yes

    # ==========================================
    # 2. Installation dépendances
    # ==========================================
    - name: Install required packages
      apt:
        name:
          - apt-transport-https
          - ca-certificates
          - curl
          - gnupg
          - lsb-release
          - git
          - ufw
          - fail2ban
          - htop
          - ncdu
        state: present

    # ==========================================
    # 3. Installation Docker
    # ==========================================
    - name: Add Docker GPG key
      apt_key:
        url: https://download.docker.com/linux/ubuntu/gpg
        state: present

    - name: Add Docker repository
      apt_repository:
        repo: "deb [arch=amd64] https://download.docker.com/linux/ubuntu {{ ansible_distribution_release }} stable"
        state: present

    - name: Install Docker
      apt:
        name:
          - docker-ce
          - docker-ce-cli
          - containerd.io
          - docker-compose-plugin
        state: present

    - name: Start and enable Docker
      systemd:
        name: docker
        state: started
        enabled: yes

    # ==========================================
    # 4. Création utilisateur KoproGo
    # ==========================================
    - name: Create koprogo user
      user:
        name: "{{ koprogo_user }}"
        shell: /bin/bash
        create_home: yes
        groups: docker
        append: yes

    # ==========================================
    # 5. Configuration Firewall
    # ==========================================
    - name: Configure UFW defaults
      ufw:
        direction: "{{ item.direction }}"
        policy: "{{ item.policy }}"
      loop:
        - { direction: 'incoming', policy: 'deny' }
        - { direction: 'outgoing', policy: 'allow' }

    - name: Allow SSH
      ufw:
        rule: allow
        port: '22'
        proto: tcp

    - name: Allow HTTP
      ufw:
        rule: allow
        port: '80'
        proto: tcp

    - name: Allow HTTPS
      ufw:
        rule: allow
        port: '443'
        proto: tcp

    - name: Enable UFW
      ufw:
        state: enabled

    # ==========================================
    # 6. Clone du dépôt KoproGo
    # ==========================================
    - name: Remove existing KoproGo directory if present
      file:
        path: "{{ koprogo_dir }}"
        state: absent

    - name: Clone KoproGo repository as root
      git:
        repo: "{{ koprogo_repo }}"
        dest: "{{ koprogo_dir }}"
        version: "{{ koprogo_branch }}"

    - name: Set ownership of KoproGo directory
      file:
        path: "{{ koprogo_dir }}"
        owner: "{{ koprogo_user }}"
        group: "{{ koprogo_user }}"
        recurse: yes

    - name: Configure git safe directory
      command: git config --global --add safe.directory {{ koprogo_dir }}
      become: yes
      become_user: "{{ koprogo_user }}"

    # ==========================================
    # 7. Configuration environnement
    # ==========================================
    - name: Create .env file for production deployment
      template:
        src: env-production.j2
        dest: "{{ koprogo_dir }}/deploy/production/.env"
        owner: "{{ koprogo_user }}"
        group: "{{ koprogo_user }}"
        mode: '0600'

    # ==========================================
    # 8. Configuration DNS OVH (si domaine fourni)
    # ==========================================
    - name: Install Python3 pip
      apt:
        name: python3-pip
        state: present
      when: koprogo_domain != '' and koprogo_domain is defined

    - name: Install Python OVH module
      pip:
        name: ovh
        state: present
      when: koprogo_domain != '' and koprogo_domain is defined

    - name: Copy OVH DNS configuration script
      copy:
        src: configure-ovh-dns.py
        dest: /tmp/configure-ovh-dns.py
        mode: '0755'
      when: koprogo_domain != '' and koprogo_domain is defined

    - name: Configure OVH DNS for frontend domain
      command: python3 /tmp/configure-ovh-dns.py
      environment:
        DOMAIN: "{{ frontend_domain }}"
        TARGET_IP: "{{ ansible_host }}"
        OVH_ENDPOINT: "{{ lookup('env', 'OVH_ENDPOINT') | default('ovh-eu', true) }}"
        OVH_APPLICATION_KEY: "{{ lookup('env', 'OVH_APPLICATION_KEY') }}"
        OVH_APPLICATION_SECRET: "{{ lookup('env', 'OVH_APPLICATION_SECRET') }}"
        OVH_CONSUMER_KEY: "{{ lookup('env', 'OVH_CONSUMER_KEY') }}"
      when: koprogo_domain != '' and koprogo_domain is defined and lookup('env', 'OVH_APPLICATION_KEY') != ''
      register: dns_config_frontend
      failed_when: false

    - name: Configure OVH DNS for API domain
      command: python3 /tmp/configure-ovh-dns.py
      environment:
        DOMAIN: "{{ api_domain }}"
        TARGET_IP: "{{ ansible_host }}"
        OVH_ENDPOINT: "{{ lookup('env', 'OVH_ENDPOINT') | default('ovh-eu', true) }}"
        OVH_APPLICATION_KEY: "{{ lookup('env', 'OVH_APPLICATION_KEY') }}"
        OVH_APPLICATION_SECRET: "{{ lookup('env', 'OVH_APPLICATION_SECRET') }}"
        OVH_CONSUMER_KEY: "{{ lookup('env', 'OVH_CONSUMER_KEY') }}"
      when: koprogo_domain != '' and koprogo_domain is defined and lookup('env', 'OVH_APPLICATION_KEY') != ''
      register: dns_config_api
      failed_when: false

    - name: Display DNS configuration result (frontend)
      debug:
        var: dns_config_frontend.stdout_lines
      when: dns_config_frontend is defined and dns_config_frontend.stdout_lines is defined

    - name: Display DNS configuration result (API)
      debug:
        var: dns_config_api.stdout_lines
      when: dns_config_api is defined and dns_config_api.stdout_lines is defined

    # ==========================================
    # 9. Déploiement avec GitOps (Standard)
    # ==========================================
    - name: Deploy KoproGo using gitops-deploy.sh
      command: "{{ koprogo_dir }}/deploy/production/gitops-deploy.sh deploy"
      args:
        chdir: "{{ koprogo_dir }}"
      become: yes
      become_user: root
      environment:
        REPO_DIR: "{{ koprogo_dir }}"

    # ==========================================
    # 10. Configuration GitOps Auto-Update (Systemd Service)
    # ==========================================
    - name: Install GitOps systemd service
      template:
        src: koprogo-gitops.service.j2
        dest: /etc/systemd/system/koprogo-gitops.service
        owner: root
        group: root
        mode: '0644'

    - name: Create log file with correct permissions
      file:
        path: /var/log/koprogo-gitops.log
        state: touch
        owner: "{{ koprogo_user }}"
        group: "{{ koprogo_user }}"
        mode: '0644'

    - name: Reload systemd daemon
      systemd:
        daemon_reload: yes

    - name: Enable and start GitOps service
      systemd:
        name: koprogo-gitops
        enabled: yes
        state: started

    # ==========================================
    # 10. Configuration backups
    # ==========================================
    - name: Create backup script
      template:
        src: backup.sh.j2
        dest: "{{ koprogo_dir }}/scripts/backup.sh"
        owner: "{{ koprogo_user }}"
        group: "{{ koprogo_user }}"
        mode: '0755'

    - name: Setup daily backup cron job
      cron:
        name: "KoproGo Daily Backup"
        minute: "0"
        hour: "2"
        job: "{{ koprogo_dir }}/scripts/backup.sh >> /var/log/koprogo-backup.log 2>&1"
        user: "{{ koprogo_user }}"

    # ==========================================
    # 11. Monitoring basique
    # ==========================================
    - name: Create monitoring script
      template:
        src: health-check.sh.j2
        dest: "{{ koprogo_dir }}/scripts/health-check.sh"
        owner: "{{ koprogo_user }}"
        group: "{{ koprogo_user }}"
        mode: '0755'

    - name: Setup health check cron job (every 5 min)
      cron:
        name: "KoproGo Health Check"
        minute: "*/5"
        job: "{{ koprogo_dir }}/scripts/health-check.sh >> /var/log/koprogo-health.log 2>&1"
        user: "{{ koprogo_user }}"

    # ==========================================
    # 12. Outputs et vérifications
    # ==========================================
    - name: Wait for services to start
      pause:
        seconds: 10

    - name: Check API health
      uri:
        url: "http://localhost:8080/api/v1/health"
        method: GET
        status_code: 200
      register: health_check
      retries: 5
      delay: 5
      until: health_check.status == 200

    - name: Display deployment info
      debug:
        msg:
          - "=========================================="
          - "KoproGo déployé avec succès !"
          - "=========================================="
          - "URL Frontend: {{ 'https://' if enable_ssl else 'http://' }}{{ frontend_domain if frontend_domain else ansible_host }}"
          - "URL API: {{ 'https://' if enable_ssl else 'http://' }}{{ api_domain if api_domain else ansible_host }}/api/v1"
          - "Health check: {{ 'https://' if enable_ssl else 'http://' }}{{ api_domain if api_domain else ansible_host }}/api/v1/health"
          - "Logs Docker: docker compose logs -f (dans {{ koprogo_dir }}/deploy/production)"
          - "GitOps Service: systemctl status koprogo-gitops"
          - "GitOps Logs: tail -f /var/log/koprogo-gitops.log"
          - "Auto-update: Continuous (checks every 3 minutes)"
          - "Backups: Tous les jours à 2h (cron)"
          - "=========================================="
