#!/bin/bash

# Script pour créer automatiquement inventory.ini depuis Terraform outputs
# Usage: ./setup-inventory.sh

set -e

SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
TERRAFORM_DIR="$SCRIPT_DIR/../terraform"
INVENTORY_FILE="$SCRIPT_DIR/inventory.ini"

echo "═══════════════════════════════════════════════════════════"
echo "  Configuration Ansible Inventory depuis Terraform"
echo "═══════════════════════════════════════════════════════════"
echo ""

# Vérifier que Terraform a déployé
if [ ! -d "$TERRAFORM_DIR/.terraform" ]; then
    echo "❌ Terraform n'est pas initialisé dans $TERRAFORM_DIR"
    echo "   Exécutez d'abord: cd $TERRAFORM_DIR && terraform init"
    exit 1
fi

# Vérifier qu'il y a un déploiement
if [ ! -f "$TERRAFORM_DIR/terraform.tfstate" ]; then
    echo "❌ Aucun déploiement Terraform trouvé"
    echo "   Exécutez d'abord: cd $TERRAFORM_DIR && terraform apply"
    exit 1
fi

# Récupérer l'IP du VPS depuis Terraform
echo "📡 Récupération de l'IP du VPS depuis Terraform..."
cd "$TERRAFORM_DIR"

# Charger les variables d'environnement si nécessaire
if [ -f .env ]; then
    set -a
    source .env
    set +a
fi

VPS_IP=$(terraform output -raw vps_ip 2>/dev/null)

if [ -z "$VPS_IP" ] || [ "$VPS_IP" == "null" ]; then
    echo "❌ Impossible de récupérer l'IP du VPS"
    echo "   Vérifiez que terraform apply a été exécuté avec succès"
    exit 1
fi

echo "✅ VPS IP trouvée: $VPS_IP"
echo ""

# Demander des variables optionnelles
echo "Configuration optionnelle:"
echo ""
read -p "Domaine (optionnel, laissez vide pour skip): " DOMAIN
read -p "Email ACME pour SSL (optionnel, laissez vide pour skip): " ACME_EMAIL

# Créer inventory.ini
echo ""
echo "📝 Création de inventory.ini..."

cat > "$INVENTORY_FILE" <<EOF
# Ansible Inventory for KoproGo
# Generated by setup-inventory.sh on $(date)
# VPS IP from Terraform: $VPS_IP

[koprogo]
koprogo-vps ansible_host=$VPS_IP ansible_user=ubuntu ansible_ssh_private_key_file=~/.ssh/id_rsa

[koprogo:vars]
# Domain configuration (optional)
EOF

if [ -n "$DOMAIN" ]; then
    echo "domain=$DOMAIN" >> "$INVENTORY_FILE"
fi

if [ -n "$ACME_EMAIL" ]; then
    echo "acme_email=$ACME_EMAIL" >> "$INVENTORY_FILE"
fi

echo "✅ Fichier inventory.ini créé"
echo ""

# Afficher le contenu
echo "Contenu de inventory.ini:"
echo "─────────────────────────────────────────────────────────"
cat "$INVENTORY_FILE"
echo "─────────────────────────────────────────────────────────"
echo ""

# Vérifier Ansible
if ! command -v ansible &> /dev/null; then
    echo "⚠️  Ansible n'est pas installé"
    echo ""
    echo "Pour installer Ansible:"
    echo "  Ubuntu/Debian: sudo apt install -y ansible"
    echo "  macOS: brew install ansible"
    echo "  pip: pip3 install ansible"
    echo ""
    exit 1
fi

echo "✅ Ansible installé: $(ansible --version | head -n1)"
echo ""

# Tester la connexion SSH
echo "🔍 Test de connexion SSH au VPS..."
if ssh -o ConnectTimeout=5 -o StrictHostKeyChecking=no ubuntu@$VPS_IP "echo 'OK'" &>/dev/null; then
    echo "✅ Connexion SSH OK"
else
    echo "⚠️  Connexion SSH échouée"
    echo "   Vérifiez que votre clé SSH est configurée correctement"
    echo "   Test manuel: ssh ubuntu@$VPS_IP"
    echo ""
    echo "   Si c'est la première connexion, ajoutez l'hôte:"
    echo "   ssh-keyscan -H $VPS_IP >> ~/.ssh/known_hosts"
fi

echo ""

# Tester avec Ansible ping
echo "🔍 Test de connexion Ansible..."
cd "$SCRIPT_DIR"
if ansible koprogo -i inventory.ini -m ping &>/dev/null; then
    echo "✅ Ansible ping OK"
else
    echo "⚠️  Ansible ping échoué"
    echo "   Test manuel: ansible koprogo -i inventory.ini -m ping"
fi

echo ""
echo "═══════════════════════════════════════════════════════════"
echo "  Configuration terminée!"
echo "═══════════════════════════════════════════════════════════"
echo ""
echo "Prochaines étapes:"
echo ""
echo "  1. Tester la connexion:"
echo "     ansible koprogo -i inventory.ini -m ping"
echo ""
echo "  2. Déployer KoproGo:"
echo "     ansible-playbook -i inventory.ini playbook.yml"
echo ""
echo "  3. Vérifier l'API:"
echo "     curl http://$VPS_IP:8080/api/v1/health"
echo ""
