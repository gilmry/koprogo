# ============================================================================
# KoproGo Production Dockerfile
# Multi-stage build for minimal image size and optimal performance
# ============================================================================

# Stage 1: Build
FROM rust:1.75-slim-bookworm AS builder

WORKDIR /build

# Install build dependencies
RUN apt-get update && \
    apt-get install -y --no-install-recommends \
        pkg-config \
        libssl-dev \
        libpq-dev \
        curl && \
    rm -rf /var/lib/apt/lists/*

# Copy manifests
COPY Cargo.toml Cargo.lock ./

# Copy source code
COPY src ./src
COPY migrations ./migrations

# Build with optimizations (matching CLAUDE.md specs)
RUN cargo build --release && \
    strip target/release/koprogo-backend

# Stage 2: Runtime
FROM debian:bookworm-slim

WORKDIR /app

# Install runtime dependencies only
RUN apt-get update && \
    apt-get install -y --no-install-recommends \
        ca-certificates \
        libpq5 \
        libssl3 \
        curl && \
    rm -rf /var/lib/apt/lists/* && \
    # Create non-root user
    useradd -m -u 1000 koprogo && \
    chown -R koprogo:koprogo /app

# Copy binary from builder
COPY --from=builder /build/target/release/koprogo-backend /app/koprogo-backend

# Copy migrations for runtime
COPY --from=builder /build/migrations /app/migrations

# Create directories for uploads and logs
RUN mkdir -p /app/uploads /app/logs && \
    chown -R koprogo:koprogo /app/uploads /app/logs

# Switch to non-root user
USER koprogo

# Expose port
EXPOSE 8080

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=40s --retries=3 \
    CMD curl -f http://localhost:8080/api/v1/health || exit 1

# Set environment defaults
ENV RUST_LOG=info \
    RUST_BACKTRACE=0 \
    SERVER_HOST=0.0.0.0 \
    SERVER_PORT=8080

# Run the application
CMD ["/app/koprogo-backend"]
