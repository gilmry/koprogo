################################################################################
# KoproGo Production Deployment - Managed by Argo CD
# Optimized for low-resource VPS (1 vCPU, 2GB RAM)
# Source: https://github.com/YOUR_USERNAME/koprogo
################################################################################

services:
  traefik:
    image: traefik:v3.5.3
    container_name: koprogo-traefik
    restart: unless-stopped

    command:
      # API and dashboard
      - "--api.dashboard=true"
      - "--api.insecure=false"
      # Docker provider
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"
      # Entrypoints
      - "--entrypoints.web.address=:80"
      - "--entrypoints.websecure.address=:443"
      # HTTP to HTTPS redirect
      - "--entrypoints.web.http.redirections.entrypoint.to=websecure"
      - "--entrypoints.web.http.redirections.entrypoint.scheme=https"
      # Let's Encrypt
      - "--certificatesresolvers.letsencrypt.acme.email=${ACME_EMAIL:-admin@example.com}"
      - "--certificatesresolvers.letsencrypt.acme.storage=/letsencrypt/acme.json"
      - "--certificatesresolvers.letsencrypt.acme.httpchallenge=true"
      - "--certificatesresolvers.letsencrypt.acme.httpchallenge.entrypoint=web"
      # Logs
      - "--log.level=${TRAEFIK_LOG_LEVEL:-INFO}"
      - "--accesslog=true"
      # Metrics (optional)
      - "--metrics.prometheus=true"

    ports:
      - "80:80"
      - "443:443"

    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - traefik_letsencrypt:/letsencrypt

    labels:
      # Dashboard (access via https://traefik.domain.com/dashboard/)
      - "traefik.enable=true"
      - "traefik.http.routers.traefik.rule=Host(`${TRAEFIK_DOMAIN:-traefik.koprogo.com}`) && PathPrefix(`/dashboard`)"
      - "traefik.http.routers.traefik.service=api@internal"
      - "traefik.http.routers.traefik.entrypoints=websecure"
      - "traefik.http.routers.traefik.tls.certresolver=letsencrypt"
      # Dashboard auth (default: admin/admin - CHANGE THIS!)
      - "traefik.http.routers.traefik.middlewares=dashboard-auth"
      - "traefik.http.middlewares.dashboard-auth.basicauth.users=${TRAEFIK_DASHBOARD_AUTH:-admin:$$apr1$$8EVjn/nj$$GiLUZqcbueTFeD23SuB6x0}"

    networks:
      - koprogo-network

    deploy:
      resources:
        limits:
          memory: 80M
          cpus: '0.25'

  postgres:
    image: postgres:15-alpine
    container_name: koprogo-postgres
    restart: unless-stopped

    environment:
      POSTGRES_DB: koprogo_db
      POSTGRES_USER: koprogo
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-koprogo123}
      POSTGRES_INITDB_ARGS: "--encoding=UTF8 --locale=en_US.UTF-8"

    volumes:
      - postgres_data:/var/lib/postgresql/data

    # NOT exposed externally for security
    expose:
      - "5432"

    command:
      - "postgres"
      # Performance tuning for 1 vCPU / 2GB RAM VPS
      - "-c"
      - "shared_buffers=256MB"
      - "-c"
      - "effective_cache_size=768MB"
      - "-c"
      - "maintenance_work_mem=64MB"
      - "-c"
      - "work_mem=5MB"
      - "-c"
      - "max_connections=15"
      # SSD optimizations
      - "-c"
      - "random_page_cost=1.1"
      - "-c"
      - "effective_io_concurrency=200"
      # WAL settings
      - "-c"
      - "max_wal_size=1GB"
      - "-c"
      - "min_wal_size=512MB"
      - "-c"
      - "checkpoint_completion_target=0.9"
      - "-c"
      - "wal_buffers=8MB"
      # Query performance
      - "-c"
      - "default_statistics_target=100"
      - "-c"
      - "log_statement=ddl"
      - "-c"
      - "log_min_duration_statement=1000"
      # Extensions
      - "-c"
      - "shared_preload_libraries=pg_stat_statements"
      - "-c"
      - "pg_stat_statements.track=all"

    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U koprogo -d koprogo_db"]
      interval: 10s
      timeout: 5s
      retries: 5

    networks:
      - koprogo-network

  backend:
    image: ghcr.io/${GITHUB_REPOSITORY:-user/koprogo}/backend:${IMAGE_TAG:-latest}
    container_name: koprogo-backend
    restart: unless-stopped

    environment:
      DATABASE_URL: postgresql://koprogo:${POSTGRES_PASSWORD:-koprogo123}@postgres:5432/koprogo_db
      SERVER_HOST: 0.0.0.0
      SERVER_PORT: 8080
      RUST_LOG: ${RUST_LOG:-warn}
      RUST_BACKTRACE: ${RUST_BACKTRACE:-0}
      ACTIX_WORKERS: ${ACTIX_WORKERS:-1}
      CORS_ALLOWED_ORIGINS: ${CORS_ALLOWED_ORIGINS:-https://app.koprogo.com,https://app2.koprogo.com}
      DB_POOL_MAX_CONNECTIONS: ${DB_POOL_MAX_CONNECTIONS:-8}
      DB_POOL_MIN_CONNECTIONS: ${DB_POOL_MIN_CONNECTIONS:-2}
      ENABLE_RATE_LIMITING: ${ENABLE_RATE_LIMITING:-false}
      JWT_SECRET: ${JWT_SECRET}

    depends_on:
      postgres:
        condition: service_healthy

    volumes:
      - backend_uploads:/app/uploads
      - backend_logs:/app/logs

    # Traefik labels for routing and SSL
    labels:
      - "traefik.enable=true"
      # HTTP router
      - "traefik.http.routers.backend.rule=Host(`${API_DOMAIN:-api2.koprogo.com}`)"
      - "traefik.http.routers.backend.entrypoints=websecure"
      - "traefik.http.routers.backend.tls.certresolver=letsencrypt"
      - "traefik.http.services.backend.loadbalancer.server.port=8080"
      # Middlewares
      - "traefik.http.routers.backend.middlewares=rate-limit,security-headers"
      # Rate limiting (500 req/s average, burst 1000)
      - "traefik.http.middlewares.rate-limit.ratelimit.average=500"
      - "traefik.http.middlewares.rate-limit.ratelimit.burst=1000"
      # Security headers
      - "traefik.http.middlewares.security-headers.headers.frameDeny=true"
      - "traefik.http.middlewares.security-headers.headers.contentTypeNosniff=true"
      - "traefik.http.middlewares.security-headers.headers.browserXssFilter=true"
      - "traefik.http.middlewares.security-headers.headers.stsSeconds=31536000"
      - "traefik.http.middlewares.security-headers.headers.stsIncludeSubdomains=true"

    # Resource limits
    deploy:
      resources:
        limits:
          memory: 384M
          cpus: '0.75'
        reservations:
          memory: 256M
          cpus: '0.25'

    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8080/api/v1/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

    networks:
      - koprogo-network

  frontend:
    image: ghcr.io/${GITHUB_REPOSITORY:-user/koprogo}/frontend:${IMAGE_TAG:-latest}
    container_name: koprogo-frontend
    restart: unless-stopped

    environment:
      PUBLIC_API_URL: https://${API_DOMAIN:-api2.koprogo.com}/api/v1

    depends_on:
      backend:
        condition: service_healthy

    # NOT exposed externally (Traefik handles external access)
    expose:
      - "80"

    # Traefik labels for routing and SSL
    labels:
      - "traefik.enable=true"
      # HTTPS router
      - "traefik.http.routers.frontend.rule=Host(`${FRONTEND_DOMAIN:-app.koprogo.com}`)"
      - "traefik.http.routers.frontend.entrypoints=websecure"
      - "traefik.http.routers.frontend.tls.certresolver=letsencrypt"
      - "traefik.http.services.frontend.loadbalancer.server.port=80"
      # Security headers
      - "traefik.http.routers.frontend.middlewares=frontend-security-headers"
      - "traefik.http.middlewares.frontend-security-headers.headers.frameDeny=true"
      - "traefik.http.middlewares.frontend-security-headers.headers.contentTypeNosniff=true"
      - "traefik.http.middlewares.frontend-security-headers.headers.browserXssFilter=true"
      - "traefik.http.middlewares.frontend-security-headers.headers.stsSeconds=31536000"
      - "traefik.http.middlewares.frontend-security-headers.headers.stsIncludeSubdomains=true"

    # Resource limits
    deploy:
      resources:
        limits:
          memory: 128M
          cpus: '0.5'
        reservations:
          memory: 96M
          cpus: '0.125'

    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s

    networks:
      - koprogo-network

networks:
  koprogo-network:
    driver: bridge

volumes:
  postgres_data:
    driver: local
  traefik_letsencrypt:
    driver: local
  backend_uploads:
    driver: local
  backend_logs:
    driver: local
